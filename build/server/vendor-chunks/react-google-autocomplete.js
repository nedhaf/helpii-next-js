"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-google-autocomplete";
exports.ids = ["vendor-chunks/react-google-autocomplete"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-google-autocomplete/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-google-autocomplete/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib */ \"(ssr)/./node_modules/react-google-autocomplete/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZ29vZ2xlLWF1dG9jb21wbGV0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxnSEFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdvb2dsZS1hdXRvY29tcGxldGUvaW5kZXguanM/ZDdhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-google-autocomplete/lib/ReactGoogleAutocomplete.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-google-autocomplete/lib/ReactGoogleAutocomplete.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _usePlacesWidget2 = _interopRequireDefault(__webpack_require__(/*! ./usePlacesWidget */ \"(ssr)/./node_modules/react-google-autocomplete/lib/usePlacesWidget.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ReactGoogleAutocomplete(props) {\n    var onPlaceSelected = props.onPlaceSelected, apiKey = props.apiKey, libraries = props.libraries, inputAutocompleteValue = props.inputAutocompleteValue, options = props.options, googleMapsScriptBaseUrl = props.googleMapsScriptBaseUrl, refProp = props.refProp, language = props.language, rest = _objectWithoutProperties(props, [\n        \"onPlaceSelected\",\n        \"apiKey\",\n        \"libraries\",\n        \"inputAutocompleteValue\",\n        \"options\",\n        \"googleMapsScriptBaseUrl\",\n        \"refProp\",\n        \"language\"\n    ]);\n    var _usePlacesWidget = (0, _usePlacesWidget2.default)({\n        ref: refProp,\n        googleMapsScriptBaseUrl: googleMapsScriptBaseUrl,\n        onPlaceSelected: onPlaceSelected,\n        apiKey: apiKey,\n        libraries: libraries,\n        inputAutocompleteValue: inputAutocompleteValue,\n        options: options,\n        language: language\n    }), ref = _usePlacesWidget.ref;\n    return /*#__PURE__*/ _react.default.createElement(\"input\", _extends({\n        ref: ref\n    }, rest));\n}\nReactGoogleAutocomplete.propTypes = {\n    apiKey: _propTypes.default.string,\n    libraries: _propTypes.default.arrayOf(_propTypes.default.string),\n    ref: _propTypes.default.oneOfType([\n        _propTypes.default.func,\n        _propTypes.default.shape({\n            current: _propTypes.default.any\n        })\n    ]),\n    googleMapsScriptBaseUrl: _propTypes.default.string,\n    onPlaceSelected: _propTypes.default.func,\n    inputAutocompleteValue: _propTypes.default.string,\n    options: _propTypes.default.shape({\n        componentRestrictions: _propTypes.default.object,\n        bounds: _propTypes.default.object,\n        location: _propTypes.default.object,\n        offset: _propTypes.default.number,\n        origin: _propTypes.default.object,\n        radius: _propTypes.default.number,\n        sessionToken: _propTypes.default.object,\n        types: _propTypes.default.arrayOf(_propTypes.default.string)\n    }),\n    language: _propTypes.default.string\n};\nvar _default = /*#__PURE__*/ (0, _react.forwardRef)(function(props, ref) {\n    return /*#__PURE__*/ _react.default.createElement(ReactGoogleAutocomplete, _extends({}, props, {\n        refProp: ref\n    }));\n});\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/lib/ReactGoogleAutocomplete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-google-autocomplete/lib/constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-google-autocomplete/lib/constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GOOGLE_MAP_SCRIPT_BASE_URL = void 0;\nvar GOOGLE_MAP_SCRIPT_BASE_URL = \"https://maps.googleapis.com/maps/api/js\";\nexports.GOOGLE_MAP_SCRIPT_BASE_URL = GOOGLE_MAP_SCRIPT_BASE_URL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZ29vZ2xlLWF1dG9jb21wbGV0ZS9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQ0FBa0MsR0FBRyxLQUFLO0FBQzFDLElBQUlFLDZCQUE2QjtBQUNqQ0Ysa0NBQWtDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1nb29nbGUtYXV0b2NvbXBsZXRlL2xpYi9jb25zdGFudHMuanM/ZTRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR09PR0xFX01BUF9TQ1JJUFRfQkFTRV9VUkwgPSB2b2lkIDA7XG52YXIgR09PR0xFX01BUF9TQ1JJUFRfQkFTRV9VUkwgPSBcImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qc1wiO1xuZXhwb3J0cy5HT09HTEVfTUFQX1NDUklQVF9CQVNFX1VSTCA9IEdPT0dMRV9NQVBfU0NSSVBUX0JBU0VfVVJMOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdPT0dMRV9NQVBfU0NSSVBUX0JBU0VfVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-google-autocomplete/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-google-autocomplete/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function get() {\n        return _ReactGoogleAutocomplete.default;\n    }\n}));\nObject.defineProperty(exports, \"usePlacesWidget\", ({\n    enumerable: true,\n    get: function get() {\n        return _usePlacesWidget.default;\n    }\n}));\nvar _ReactGoogleAutocomplete = _interopRequireDefault(__webpack_require__(/*! ./ReactGoogleAutocomplete */ \"(ssr)/./node_modules/react-google-autocomplete/lib/ReactGoogleAutocomplete.js\"));\nvar _usePlacesWidget = _interopRequireDefault(__webpack_require__(/*! ./usePlacesWidget */ \"(ssr)/./node_modules/react-google-autocomplete/lib/usePlacesWidget.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZ29vZ2xlLWF1dG9jb21wbGV0ZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZILDJDQUEwQztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLLFNBQVNBO1FBQ1osT0FBT0MseUJBQXlCQyxPQUFPO0lBQ3pDO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLG1EQUFrRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLLFNBQVNBO1FBQ1osT0FBT0csaUJBQWlCRCxPQUFPO0lBQ2pDO0FBQ0YsQ0FBQyxFQUFDO0FBRUYsSUFBSUQsMkJBQTJCRyx1QkFBdUJDLG1CQUFPQSxDQUFDLGdIQUEyQjtBQUV6RixJQUFJRixtQkFBbUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0dBQW1CO0FBRXpFLFNBQVNELHVCQUF1QkUsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFSixTQUFTSTtJQUFJO0FBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdvb2dsZS1hdXRvY29tcGxldGUvbGliL2luZGV4LmpzP2ZlY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9SZWFjdEdvb2dsZUF1dG9jb21wbGV0ZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVBsYWNlc1dpZGdldFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdXNlUGxhY2VzV2lkZ2V0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1JlYWN0R29vZ2xlQXV0b2NvbXBsZXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZWFjdEdvb2dsZUF1dG9jb21wbGV0ZVwiKSk7XG5cbnZhciBfdXNlUGxhY2VzV2lkZ2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91c2VQbGFjZXNXaWRnZXRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfUmVhY3RHb29nbGVBdXRvY29tcGxldGUiLCJkZWZhdWx0IiwiX3VzZVBsYWNlc1dpZGdldCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-google-autocomplete/lib/usePlacesWidget.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-google-autocomplete/lib/usePlacesWidget.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = usePlacesWidget;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-google-autocomplete/lib/utils.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-google-autocomplete/lib/constants.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction usePlacesWidget(props) {\n    var ref = props.ref, onPlaceSelected = props.onPlaceSelected, apiKey = props.apiKey, _props$libraries = props.libraries, libraries = _props$libraries === void 0 ? \"places\" : _props$libraries, _props$inputAutocompl = props.inputAutocompleteValue, inputAutocompleteValue = _props$inputAutocompl === void 0 ? \"new-password\" : _props$inputAutocompl, _props$options = props.options;\n    _props$options = _props$options === void 0 ? {} : _props$options;\n    var _props$options$types = _props$options.types, types = _props$options$types === void 0 ? [\n        \"(cities)\"\n    ] : _props$options$types, componentRestrictions = _props$options.componentRestrictions, _props$options$fields = _props$options.fields, fields = _props$options$fields === void 0 ? [\n        \"address_components\",\n        \"geometry.location\",\n        \"place_id\",\n        \"formatted_address\"\n    ] : _props$options$fields, bounds = _props$options.bounds, options = _objectWithoutProperties(_props$options, [\n        \"types\",\n        \"componentRestrictions\",\n        \"fields\",\n        \"bounds\"\n    ]), _props$googleMapsScri = props.googleMapsScriptBaseUrl, googleMapsScriptBaseUrl = _props$googleMapsScri === void 0 ? _constants.GOOGLE_MAP_SCRIPT_BASE_URL : _props$googleMapsScri, language = props.language;\n    var inputRef = (0, _react.useRef)(null);\n    var event = (0, _react.useRef)(null);\n    var autocompleteRef = (0, _react.useRef)(null);\n    var observerHack = (0, _react.useRef)(null);\n    var languageQueryParam = language ? \"&language=\".concat(language) : \"\";\n    var googleMapsScriptUrl = \"\".concat(googleMapsScriptBaseUrl, \"?libraries=\").concat(libraries, \"&key=\").concat(apiKey).concat(languageQueryParam);\n    var handleLoadScript = (0, _react.useCallback)(function() {\n        return (0, _utils.loadGoogleMapScript)(googleMapsScriptBaseUrl, googleMapsScriptUrl);\n    }, [\n        googleMapsScriptBaseUrl,\n        googleMapsScriptUrl\n    ]);\n    (0, _react.useEffect)(function() {\n        var config = _objectSpread(_objectSpread({}, options), {}, {\n            fields: fields,\n            types: types,\n            bounds: bounds\n        });\n        if (componentRestrictions) {\n            config.componentRestrictions = componentRestrictions;\n        }\n        if (autocompleteRef.current || !inputRef.current || !_utils.isBrowser) return;\n        if (ref && !ref.current) ref.current = inputRef.current;\n        var handleAutoComplete = function handleAutoComplete() {\n            var _google$maps;\n            if (typeof google === \"undefined\") return console.error(\"Google has not been found. Make sure your provide apiKey prop.\");\n            if (!((_google$maps = google.maps) !== null && _google$maps !== void 0 && _google$maps.places)) return console.error(\"Google maps places API must be loaded.\");\n            if (!inputRef.current instanceof HTMLInputElement) return console.error(\"Input ref must be HTMLInputElement.\");\n            autocompleteRef.current = new google.maps.places.Autocomplete(inputRef.current, config);\n            if (autocompleteRef.current) {\n                event.current = autocompleteRef.current.addListener(\"place_changed\", function() {\n                    if (onPlaceSelected && autocompleteRef && autocompleteRef.current) {\n                        onPlaceSelected(autocompleteRef.current.getPlace(), inputRef.current, autocompleteRef.current);\n                    }\n                });\n            }\n        };\n        if (apiKey) {\n            handleLoadScript().then(function() {\n                return handleAutoComplete();\n            });\n        } else {\n            handleAutoComplete();\n        }\n        return function() {\n            return event.current ? event.current.remove() : undefined;\n        };\n    }, []); // Autofill workaround adapted from https://stackoverflow.com/questions/29931712/chrome-autofill-covers-autocomplete-for-google-maps-api-v3/49161445#49161445\n    (0, _react.useEffect)(function() {\n        var _React$version;\n        // TODO find out why react 18(strict mode) hangs the page loading\n        if (!(_react.default !== null && _react.default !== void 0 && (_React$version = _react.default.version) !== null && _React$version !== void 0 && _React$version.startsWith(\"18\")) && _utils.isBrowser && window.MutationObserver && inputRef.current && inputRef.current instanceof HTMLInputElement) {\n            observerHack.current = new MutationObserver(function() {\n                observerHack.current.disconnect();\n                if (inputRef.current) {\n                    inputRef.current.autocomplete = inputAutocompleteValue;\n                }\n            });\n            observerHack.current.observe(inputRef.current, {\n                attributes: true,\n                attributeFilter: [\n                    \"autocomplete\"\n                ]\n            });\n        }\n    }, [\n        inputAutocompleteValue\n    ]);\n    (0, _react.useEffect)(function() {\n        if (autocompleteRef.current) {\n            autocompleteRef.current.setFields(fields);\n        }\n    }, [\n        fields\n    ]);\n    (0, _react.useEffect)(function() {\n        if (autocompleteRef.current) {\n            autocompleteRef.current.setBounds(bounds);\n        }\n    }, [\n        bounds\n    ]);\n    (0, _react.useEffect)(function() {\n        if (autocompleteRef.current) {\n            autocompleteRef.current.setComponentRestrictions(componentRestrictions);\n        }\n    }, [\n        componentRestrictions\n    ]);\n    (0, _react.useEffect)(function() {\n        if (autocompleteRef.current) {\n            autocompleteRef.current.setOptions(options);\n        }\n    }, [\n        options\n    ]);\n    return {\n        ref: inputRef,\n        autocompleteRef: autocompleteRef\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/lib/usePlacesWidget.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-google-autocomplete/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-google-autocomplete/lib/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadGoogleMapScript = exports.isBrowser = void 0;\nvar isBrowser =  false && 0;\nexports.isBrowser = isBrowser;\nvar loadGoogleMapScript = function loadGoogleMapScript(googleMapsScriptBaseUrl, googleMapsScriptUrl) {\n    if (!isBrowser) return Promise.resolve();\n    if (typeof google !== \"undefined\") {\n        if (google.maps && google.maps.api) return Promise.resolve();\n    }\n    var scriptElements = document.querySelectorAll('script[src*=\"'.concat(googleMapsScriptBaseUrl, '\"]'));\n    if (scriptElements && scriptElements.length) {\n        return new Promise(function(resolve) {\n            // in case we already have a script on the page and it's loaded we resolve\n            if (typeof google !== \"undefined\") return resolve(); // otherwise we wait until it's loaded and resolve\n            scriptElements[0].addEventListener(\"load\", function() {\n                return resolve();\n            });\n        });\n    }\n    var scriptUrl = new URL(googleMapsScriptUrl);\n    scriptUrl.searchParams.set(\"callback\", \"__REACT_GOOGLE_AUTOCOMPLETE_CALLBACK__\");\n    var el = document.createElement(\"script\");\n    el.src = scriptUrl.toString();\n    return new Promise(function(resolve) {\n        window.__REACT_GOOGLE_AUTOCOMPLETE_CALLBACK__ = resolve;\n        document.body.appendChild(el);\n    });\n};\nexports.loadGoogleMapScript = loadGoogleMapScript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZ29vZ2xlLWF1dG9jb21wbGV0ZS9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDJCQUEyQixHQUFHQSxpQkFBaUIsR0FBRyxLQUFLO0FBQ3ZELElBQUlHLFlBQVksTUFBNkIsSUFBSUMsQ0FBZTtBQUNoRUosaUJBQWlCLEdBQUdHO0FBRXBCLElBQUlELHNCQUFzQixTQUFTQSxvQkFBb0JJLHVCQUF1QixFQUFFQyxtQkFBbUI7SUFDakcsSUFBSSxDQUFDSixXQUFXLE9BQU9LLFFBQVFDLE9BQU87SUFFdEMsSUFBSSxPQUFPQyxXQUFXLGFBQWE7UUFDakMsSUFBSUEsT0FBT0MsSUFBSSxJQUFJRCxPQUFPQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxPQUFPSixRQUFRQyxPQUFPO0lBQzVEO0lBRUEsSUFBSUksaUJBQWlCUixTQUFTUyxnQkFBZ0IsQ0FBQyxnQkFBaUJDLE1BQU0sQ0FBQ1QseUJBQXlCO0lBRWhHLElBQUlPLGtCQUFrQkEsZUFBZUcsTUFBTSxFQUFFO1FBQzNDLE9BQU8sSUFBSVIsUUFBUSxTQUFVQyxPQUFPO1lBQ2xDLDBFQUEwRTtZQUMxRSxJQUFJLE9BQU9DLFdBQVcsYUFBYSxPQUFPRCxXQUFXLGtEQUFrRDtZQUV2R0ksY0FBYyxDQUFDLEVBQUUsQ0FBQ0ksZ0JBQWdCLENBQUMsUUFBUTtnQkFDekMsT0FBT1I7WUFDVDtRQUNGO0lBQ0Y7SUFFQSxJQUFJUyxZQUFZLElBQUlDLElBQUlaO0lBQ3hCVyxVQUFVRSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxZQUFZO0lBQ3ZDLElBQUlDLEtBQUtqQixTQUFTa0IsYUFBYSxDQUFDO0lBQ2hDRCxHQUFHRSxHQUFHLEdBQUdOLFVBQVVPLFFBQVE7SUFDM0IsT0FBTyxJQUFJakIsUUFBUSxTQUFVQyxPQUFPO1FBQ2xDTCxPQUFPc0Isc0NBQXNDLEdBQUdqQjtRQUNoREosU0FBU3NCLElBQUksQ0FBQ0MsV0FBVyxDQUFDTjtJQUM1QjtBQUNGO0FBRUF0QiwyQkFBMkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWdvb2dsZS1hdXRvY29tcGxldGUvbGliL3V0aWxzLmpzP2Y4MmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmxvYWRHb29nbGVNYXBTY3JpcHQgPSBleHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5kb2N1bWVudDtcbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuXG52YXIgbG9hZEdvb2dsZU1hcFNjcmlwdCA9IGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBTY3JpcHQoZ29vZ2xlTWFwc1NjcmlwdEJhc2VVcmwsIGdvb2dsZU1hcHNTY3JpcHRVcmwpIHtcbiAgaWYgKCFpc0Jyb3dzZXIpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICBpZiAodHlwZW9mIGdvb2dsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmIChnb29nbGUubWFwcyAmJiBnb29nbGUubWFwcy5hcGkpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHZhciBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHRbc3JjKj1cXFwiXCIuY29uY2F0KGdvb2dsZU1hcHNTY3JpcHRCYXNlVXJsLCBcIlxcXCJdXCIpKTtcblxuICBpZiAoc2NyaXB0RWxlbWVudHMgJiYgc2NyaXB0RWxlbWVudHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAvLyBpbiBjYXNlIHdlIGFscmVhZHkgaGF2ZSBhIHNjcmlwdCBvbiB0aGUgcGFnZSBhbmQgaXQncyBsb2FkZWQgd2UgcmVzb2x2ZVxuICAgICAgaWYgKHR5cGVvZiBnb29nbGUgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiByZXNvbHZlKCk7IC8vIG90aGVyd2lzZSB3ZSB3YWl0IHVudGlsIGl0J3MgbG9hZGVkIGFuZCByZXNvbHZlXG5cbiAgICAgIHNjcmlwdEVsZW1lbnRzWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNjcmlwdFVybCA9IG5ldyBVUkwoZ29vZ2xlTWFwc1NjcmlwdFVybCk7XG4gIHNjcmlwdFVybC5zZWFyY2hQYXJhbXMuc2V0KFwiY2FsbGJhY2tcIiwgXCJfX1JFQUNUX0dPT0dMRV9BVVRPQ09NUExFVEVfQ0FMTEJBQ0tfX1wiKTtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgZWwuc3JjID0gc2NyaXB0VXJsLnRvU3RyaW5nKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHdpbmRvdy5fX1JFQUNUX0dPT0dMRV9BVVRPQ09NUExFVEVfQ0FMTEJBQ0tfXyA9IHJlc29sdmU7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gIH0pO1xufTtcblxuZXhwb3J0cy5sb2FkR29vZ2xlTWFwU2NyaXB0ID0gbG9hZEdvb2dsZU1hcFNjcmlwdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJsb2FkR29vZ2xlTWFwU2NyaXB0IiwiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJnb29nbGVNYXBzU2NyaXB0QmFzZVVybCIsImdvb2dsZU1hcHNTY3JpcHRVcmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdvb2dsZSIsIm1hcHMiLCJhcGkiLCJzY3JpcHRFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb25jYXQiLCJsZW5ndGgiLCJhZGRFdmVudExpc3RlbmVyIiwic2NyaXB0VXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwic2V0IiwiZWwiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidG9TdHJpbmciLCJfX1JFQUNUX0dPT0dMRV9BVVRPQ09NUExFVEVfQ0FMTEJBQ0tfXyIsImJvZHkiLCJhcHBlbmRDaGlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-autocomplete/lib/utils.js\n");

/***/ })

};
;