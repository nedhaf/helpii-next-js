"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-owl-carousel";
exports.ids = ["vendor-chunks/react-owl-carousel"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-owl-carousel/umd/OwlCarousel.js":
/*!************************************************************!*\
  !*** ./node_modules/react-owl-carousel/umd/OwlCarousel.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\");\n\n(function(global, factory) {\n     true ? module.exports = factory(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\")) : 0;\n})(void 0, function(React) {\n    \"use strict\";\n    var React__default = \"default\" in React ? React[\"default\"] : React;\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n    var __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    function __rest(s, e) {\n        var t = {};\n        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n            for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n        }\n        return t;\n    }\n    /**\n     * Owl Carousel v2.3.4\n     * Copyright 2013-2018 David Deutsch\n     * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE\n     */ (function($, window1, document1, undefined) {\n        /**\n    \t * Creates a carousel.\n    \t * @class The Owl Carousel.\n    \t * @public\n    \t * @param {HTMLElement|jQuery} element - The element to create the carousel for.\n    \t * @param {Object} [options] - The options\n    \t */ function Owl(element, options) {\n            /**\n    \t\t * Current settings for the carousel.\n    \t\t * @public\n    \t\t */ this.settings = null;\n            /**\n    \t\t * Current options set by the caller including defaults.\n    \t\t * @public\n    \t\t */ this.options = $.extend({}, Owl.Defaults, options);\n            /**\n    \t\t * Plugin element.\n    \t\t * @public\n    \t\t */ this.$element = $(element);\n            /**\n    \t\t * Proxied event handlers.\n    \t\t * @protected\n    \t\t */ this._handlers = {};\n            /**\n    \t\t * References to the running plugins of this carousel.\n    \t\t * @protected\n    \t\t */ this._plugins = {};\n            /**\n    \t\t * Currently suppressed events to prevent them from being retriggered.\n    \t\t * @protected\n    \t\t */ this._supress = {};\n            /**\n    \t\t * Absolute current position.\n    \t\t * @protected\n    \t\t */ this._current = null;\n            /**\n    \t\t * Animation speed in milliseconds.\n    \t\t * @protected\n    \t\t */ this._speed = null;\n            /**\n    \t\t * Coordinates of all items in pixel.\n    \t\t * @todo The name of this member is missleading.\n    \t\t * @protected\n    \t\t */ this._coordinates = [];\n            /**\n    \t\t * Current breakpoint.\n    \t\t * @todo Real media queries would be nice.\n    \t\t * @protected\n    \t\t */ this._breakpoint = null;\n            /**\n    \t\t * Current width of the plugin element.\n    \t\t */ this._width = null;\n            /**\n    \t\t * All real items.\n    \t\t * @protected\n    \t\t */ this._items = [];\n            /**\n    \t\t * All cloned items.\n    \t\t * @protected\n    \t\t */ this._clones = [];\n            /**\n    \t\t * Merge values of all items.\n    \t\t * @todo Maybe this could be part of a plugin.\n    \t\t * @protected\n    \t\t */ this._mergers = [];\n            /**\n    \t\t * Widths of all items.\n    \t\t */ this._widths = [];\n            /**\n    \t\t * Invalidated parts within the update process.\n    \t\t * @protected\n    \t\t */ this._invalidated = {};\n            /**\n    \t\t * Ordered list of workers for the update process.\n    \t\t * @protected\n    \t\t */ this._pipe = [];\n            /**\n    \t\t * Current state information for the drag operation.\n    \t\t * @todo #261\n    \t\t * @protected\n    \t\t */ this._drag = {\n                time: null,\n                target: null,\n                pointer: null,\n                stage: {\n                    start: null,\n                    current: null\n                },\n                direction: null\n            };\n            /**\n    \t\t * Current state information and their tags.\n    \t\t * @type {Object}\n    \t\t * @protected\n    \t\t */ this._states = {\n                current: {},\n                tags: {\n                    \"initializing\": [\n                        \"busy\"\n                    ],\n                    \"animating\": [\n                        \"busy\"\n                    ],\n                    \"dragging\": [\n                        \"interacting\"\n                    ]\n                }\n            };\n            $.each([\n                \"onResize\",\n                \"onThrottledResize\"\n            ], $.proxy(function(i, handler) {\n                this._handlers[handler] = $.proxy(this[handler], this);\n            }, this));\n            $.each(Owl.Plugins, $.proxy(function(key, plugin) {\n                this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);\n            }, this));\n            $.each(Owl.Workers, $.proxy(function(priority, worker) {\n                this._pipe.push({\n                    \"filter\": worker.filter,\n                    \"run\": $.proxy(worker.run, this)\n                });\n            }, this));\n            this.setup();\n            this.initialize();\n        }\n        /**\n    \t * Default options for the carousel.\n    \t * @public\n    \t */ Owl.Defaults = {\n            items: 3,\n            loop: false,\n            center: false,\n            rewind: false,\n            checkVisibility: true,\n            mouseDrag: true,\n            touchDrag: true,\n            pullDrag: true,\n            freeDrag: false,\n            margin: 0,\n            stagePadding: 0,\n            merge: false,\n            mergeFit: true,\n            autoWidth: false,\n            startPosition: 0,\n            rtl: false,\n            smartSpeed: 250,\n            fluidSpeed: false,\n            dragEndSpeed: false,\n            responsive: {},\n            responsiveRefreshRate: 200,\n            responsiveBaseElement: window1,\n            fallbackEasing: \"swing\",\n            slideTransition: \"\",\n            info: false,\n            nestedItemSelector: false,\n            itemElement: \"div\",\n            stageElement: \"div\",\n            refreshClass: \"owl-refresh\",\n            loadedClass: \"owl-loaded\",\n            loadingClass: \"owl-loading\",\n            rtlClass: \"owl-rtl\",\n            responsiveClass: \"owl-responsive\",\n            dragClass: \"owl-drag\",\n            itemClass: \"owl-item\",\n            stageClass: \"owl-stage\",\n            stageOuterClass: \"owl-stage-outer\",\n            grabClass: \"owl-grab\"\n        };\n        /**\n    \t * Enumeration for width.\n    \t * @public\n    \t * @readonly\n    \t * @enum {String}\n    \t */ Owl.Width = {\n            Default: \"default\",\n            Inner: \"inner\",\n            Outer: \"outer\"\n        };\n        /**\n    \t * Enumeration for types.\n    \t * @public\n    \t * @readonly\n    \t * @enum {String}\n    \t */ Owl.Type = {\n            Event: \"event\",\n            State: \"state\"\n        };\n        /**\n    \t * Contains all registered plugins.\n    \t * @public\n    \t */ Owl.Plugins = {};\n        /**\n    \t * List of workers involved in the update process.\n    \t */ Owl.Workers = [\n            {\n                filter: [\n                    \"width\",\n                    \"settings\"\n                ],\n                run: function() {\n                    this._width = this.$element.width();\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function(cache) {\n                    cache.current = this._items && this._items[this.relative(this._current)];\n                }\n            },\n            {\n                filter: [\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function() {\n                    this.$stage.children(\".cloned\").remove();\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function(cache) {\n                    var margin = this.settings.margin || \"\", grid = !this.settings.autoWidth, rtl = this.settings.rtl, css = {\n                        \"width\": \"auto\",\n                        \"margin-left\": rtl ? margin : \"\",\n                        \"margin-right\": rtl ? \"\" : margin\n                    };\n                    !grid && this.$stage.children().css(css);\n                    cache.css = css;\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function(cache) {\n                    var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin, merge = null, iterator = this._items.length, grid = !this.settings.autoWidth, widths = [];\n                    cache.items = {\n                        merge: false,\n                        width: width\n                    };\n                    while(iterator--){\n                        merge = this._mergers[iterator];\n                        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n                        cache.items.merge = merge > 1 || cache.items.merge;\n                        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n                    }\n                    this._widths = widths;\n                }\n            },\n            {\n                filter: [\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function() {\n                    var clones = [], items = this._items, settings = this.settings, // TODO: Should be computed from number of min width items in stage\n                    view = Math.max(settings.items * 2, 4), size = Math.ceil(items.length / 2) * 2, repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0, append = \"\", prepend = \"\";\n                    repeat /= 2;\n                    while(repeat > 0){\n                        // Switch to only using appended clones\n                        clones.push(this.normalize(clones.length / 2, true));\n                        append = append + items[clones[clones.length - 1]][0].outerHTML;\n                        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n                        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n                        repeat -= 1;\n                    }\n                    this._clones = clones;\n                    $(append).addClass(\"cloned\").appendTo(this.$stage);\n                    $(prepend).addClass(\"cloned\").prependTo(this.$stage);\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function() {\n                    var rtl = this.settings.rtl ? 1 : -1, size = this._clones.length + this._items.length, iterator = -1, previous = 0, current = 0, coordinates = [];\n                    while(++iterator < size){\n                        previous = coordinates[iterator - 1] || 0;\n                        current = this._widths[this.relative(iterator)] + this.settings.margin;\n                        coordinates.push(previous + current * rtl);\n                    }\n                    this._coordinates = coordinates;\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function() {\n                    var padding = this.settings.stagePadding, coordinates = this._coordinates, css = {\n                        \"width\": Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n                        \"padding-left\": padding || \"\",\n                        \"padding-right\": padding || \"\"\n                    };\n                    this.$stage.css(css);\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function(cache) {\n                    var iterator = this._coordinates.length, grid = !this.settings.autoWidth, items = this.$stage.children();\n                    if (grid && cache.items.merge) {\n                        while(iterator--){\n                            cache.css.width = this._widths[this.relative(iterator)];\n                            items.eq(iterator).css(cache.css);\n                        }\n                    } else if (grid) {\n                        cache.css.width = cache.items.width;\n                        items.css(cache.css);\n                    }\n                }\n            },\n            {\n                filter: [\n                    \"items\"\n                ],\n                run: function() {\n                    this._coordinates.length < 1 && this.$stage.removeAttr(\"style\");\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function(cache) {\n                    cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n                    cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n                    this.reset(cache.current);\n                }\n            },\n            {\n                filter: [\n                    \"position\"\n                ],\n                run: function() {\n                    this.animate(this.coordinates(this._current));\n                }\n            },\n            {\n                filter: [\n                    \"width\",\n                    \"position\",\n                    \"items\",\n                    \"settings\"\n                ],\n                run: function() {\n                    var rtl = this.settings.rtl ? 1 : -1, padding = this.settings.stagePadding * 2, begin = this.coordinates(this.current()) + padding, end = begin + this.width() * rtl, inner, outer, matches = [], i, n;\n                    for(i = 0, n = this._coordinates.length; i < n; i++){\n                        inner = this._coordinates[i - 1] || 0;\n                        outer = Math.abs(this._coordinates[i]) + padding * rtl;\n                        if (this.op(inner, \"<=\", begin) && this.op(inner, \">\", end) || this.op(outer, \"<\", begin) && this.op(outer, \">\", end)) {\n                            matches.push(i);\n                        }\n                    }\n                    this.$stage.children(\".active\").removeClass(\"active\");\n                    this.$stage.children(\":eq(\" + matches.join(\"), :eq(\") + \")\").addClass(\"active\");\n                    this.$stage.children(\".center\").removeClass(\"center\");\n                    if (this.settings.center) {\n                        this.$stage.children().eq(this.current()).addClass(\"center\");\n                    }\n                }\n            }\n        ];\n        /**\n    \t * Create the stage DOM element\n    \t */ Owl.prototype.initializeStage = function() {\n            this.$stage = this.$element.find(\".\" + this.settings.stageClass);\n            // if the stage is already in the DOM, grab it and skip stage initialization\n            if (this.$stage.length) {\n                return;\n            }\n            this.$element.addClass(this.options.loadingClass);\n            // create stage\n            this.$stage = $(\"<\" + this.settings.stageElement + \">\", {\n                \"class\": this.settings.stageClass\n            }).wrap($(\"<div/>\", {\n                \"class\": this.settings.stageOuterClass\n            }));\n            // append stage\n            this.$element.append(this.$stage.parent());\n        };\n        /**\n    \t * Create item DOM elements\n    \t */ Owl.prototype.initializeItems = function() {\n            var $items = this.$element.find(\".owl-item\");\n            // if the items are already in the DOM, grab them and skip item initialization\n            if ($items.length) {\n                this._items = $items.get().map(function(item) {\n                    return $(item);\n                });\n                this._mergers = this._items.map(function() {\n                    return 1;\n                });\n                this.refresh();\n                return;\n            }\n            // append content\n            this.replace(this.$element.children().not(this.$stage.parent()));\n            // check visibility\n            if (this.isVisible()) {\n                // update view\n                this.refresh();\n            } else {\n                // invalidate width\n                this.invalidate(\"width\");\n            }\n            this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);\n        };\n        /**\n    \t * Initializes the carousel.\n    \t * @protected\n    \t */ Owl.prototype.initialize = function() {\n            this.enter(\"initializing\");\n            this.trigger(\"initialize\");\n            this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n            if (this.settings.autoWidth && !this.is(\"pre-loading\")) {\n                var imgs, nestedSelector, width;\n                imgs = this.$element.find(\"img\");\n                nestedSelector = this.settings.nestedItemSelector ? \".\" + this.settings.nestedItemSelector : undefined;\n                width = this.$element.children(nestedSelector).width();\n                if (imgs.length && width <= 0) {\n                    this.preloadAutoWidthImages(imgs);\n                }\n            }\n            this.initializeStage();\n            this.initializeItems();\n            // register event handlers\n            this.registerEventHandlers();\n            this.leave(\"initializing\");\n            this.trigger(\"initialized\");\n        };\n        /**\n    \t * @returns {Boolean} visibility of $element\n    \t *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to\n    \t *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does\n    \t */ Owl.prototype.isVisible = function() {\n            return this.settings.checkVisibility ? this.$element.is(\":visible\") : true;\n        };\n        /**\n    \t * Setups the current settings.\n    \t * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n    \t * @todo Support for media queries by using `matchMedia` would be nice.\n    \t * @public\n    \t */ Owl.prototype.setup = function() {\n            var viewport = this.viewport(), overwrites = this.options.responsive, match = -1, settings = null;\n            if (!overwrites) {\n                settings = $.extend({}, this.options);\n            } else {\n                $.each(overwrites, function(breakpoint) {\n                    if (breakpoint <= viewport && breakpoint > match) {\n                        match = Number(breakpoint);\n                    }\n                });\n                settings = $.extend({}, this.options, overwrites[match]);\n                if (typeof settings.stagePadding === \"function\") {\n                    settings.stagePadding = settings.stagePadding();\n                }\n                delete settings.responsive;\n                // responsive class\n                if (settings.responsiveClass) {\n                    this.$element.attr(\"class\", this.$element.attr(\"class\").replace(new RegExp(\"(\" + this.options.responsiveClass + \"-)\\\\S+\\\\s\", \"g\"), \"$1\" + match));\n                }\n            }\n            this.trigger(\"change\", {\n                property: {\n                    name: \"settings\",\n                    value: settings\n                }\n            });\n            this._breakpoint = match;\n            this.settings = settings;\n            this.invalidate(\"settings\");\n            this.trigger(\"changed\", {\n                property: {\n                    name: \"settings\",\n                    value: this.settings\n                }\n            });\n        };\n        /**\n    \t * Updates option logic if necessery.\n    \t * @protected\n    \t */ Owl.prototype.optionsLogic = function() {\n            if (this.settings.autoWidth) {\n                this.settings.stagePadding = false;\n                this.settings.merge = false;\n            }\n        };\n        /**\n    \t * Prepares an item before add.\n    \t * @todo Rename event parameter `content` to `item`.\n    \t * @protected\n    \t * @returns {jQuery|HTMLElement} - The item container.\n    \t */ Owl.prototype.prepare = function(item) {\n            var event = this.trigger(\"prepare\", {\n                content: item\n            });\n            if (!event.data) {\n                event.data = $(\"<\" + this.settings.itemElement + \"/>\").addClass(this.options.itemClass).append(item);\n            }\n            this.trigger(\"prepared\", {\n                content: event.data\n            });\n            return event.data;\n        };\n        /**\n    \t * Updates the view.\n    \t * @public\n    \t */ Owl.prototype.update = function() {\n            var i = 0, n = this._pipe.length, filter = $.proxy(function(p) {\n                return this[p];\n            }, this._invalidated), cache = {};\n            while(i < n){\n                if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n                    this._pipe[i].run(cache);\n                }\n                i++;\n            }\n            this._invalidated = {};\n            !this.is(\"valid\") && this.enter(\"valid\");\n        };\n        /**\n    \t * Gets the width of the view.\n    \t * @public\n    \t * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\n    \t * @returns {Number} - The width of the view in pixel.\n    \t */ Owl.prototype.width = function(dimension) {\n            dimension = dimension || Owl.Width.Default;\n            switch(dimension){\n                case Owl.Width.Inner:\n                case Owl.Width.Outer:\n                    return this._width;\n                default:\n                    return this._width - this.settings.stagePadding * 2 + this.settings.margin;\n            }\n        };\n        /**\n    \t * Refreshes the carousel primarily for adaptive purposes.\n    \t * @public\n    \t */ Owl.prototype.refresh = function() {\n            this.enter(\"refreshing\");\n            this.trigger(\"refresh\");\n            this.setup();\n            this.optionsLogic();\n            this.$element.addClass(this.options.refreshClass);\n            this.update();\n            this.$element.removeClass(this.options.refreshClass);\n            this.leave(\"refreshing\");\n            this.trigger(\"refreshed\");\n        };\n        /**\n    \t * Checks window `resize` event.\n    \t * @protected\n    \t */ Owl.prototype.onThrottledResize = function() {\n            window1.clearTimeout(this.resizeTimer);\n            this.resizeTimer = window1.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n        };\n        /**\n    \t * Checks window `resize` event.\n    \t * @protected\n    \t */ Owl.prototype.onResize = function() {\n            if (!this._items.length) {\n                return false;\n            }\n            if (this._width === this.$element.width()) {\n                return false;\n            }\n            if (!this.isVisible()) {\n                return false;\n            }\n            this.enter(\"resizing\");\n            if (this.trigger(\"resize\").isDefaultPrevented()) {\n                this.leave(\"resizing\");\n                return false;\n            }\n            this.invalidate(\"width\");\n            this.refresh();\n            this.leave(\"resizing\");\n            this.trigger(\"resized\");\n        };\n        /**\n    \t * Registers event handlers.\n    \t * @todo Check `msPointerEnabled`\n    \t * @todo #261\n    \t * @protected\n    \t */ Owl.prototype.registerEventHandlers = function() {\n            if ($.support.transition) {\n                this.$stage.on($.support.transition.end + \".owl.core\", $.proxy(this.onTransitionEnd, this));\n            }\n            if (this.settings.responsive !== false) {\n                this.on(window1, \"resize\", this._handlers.onThrottledResize);\n            }\n            if (this.settings.mouseDrag) {\n                this.$element.addClass(this.options.dragClass);\n                this.$stage.on(\"mousedown.owl.core\", $.proxy(this.onDragStart, this));\n                this.$stage.on(\"dragstart.owl.core selectstart.owl.core\", function() {\n                    return false;\n                });\n            }\n            if (this.settings.touchDrag) {\n                this.$stage.on(\"touchstart.owl.core\", $.proxy(this.onDragStart, this));\n                this.$stage.on(\"touchcancel.owl.core\", $.proxy(this.onDragEnd, this));\n            }\n        };\n        /**\n    \t * Handles `touchstart` and `mousedown` events.\n    \t * @todo Horizontal swipe threshold as option\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */ Owl.prototype.onDragStart = function(event) {\n            var stage = null;\n            if (event.which === 3) {\n                return;\n            }\n            if ($.support.transform) {\n                stage = this.$stage.css(\"transform\").replace(/.*\\(|\\)| /g, \"\").split(\",\");\n                stage = {\n                    x: stage[stage.length === 16 ? 12 : 4],\n                    y: stage[stage.length === 16 ? 13 : 5]\n                };\n            } else {\n                stage = this.$stage.position();\n                stage = {\n                    x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,\n                    y: stage.top\n                };\n            }\n            if (this.is(\"animating\")) {\n                $.support.transform ? this.animate(stage.x) : this.$stage.stop();\n                this.invalidate(\"position\");\n            }\n            this.$element.toggleClass(this.options.grabClass, event.type === \"mousedown\");\n            this.speed(0);\n            this._drag.time = new Date().getTime();\n            this._drag.target = $(event.target);\n            this._drag.stage.start = stage;\n            this._drag.stage.current = stage;\n            this._drag.pointer = this.pointer(event);\n            $(document1).on(\"mouseup.owl.core touchend.owl.core\", $.proxy(this.onDragEnd, this));\n            $(document1).one(\"mousemove.owl.core touchmove.owl.core\", $.proxy(function(event) {\n                var delta = this.difference(this._drag.pointer, this.pointer(event));\n                $(document1).on(\"mousemove.owl.core touchmove.owl.core\", $.proxy(this.onDragMove, this));\n                if (Math.abs(delta.x) < Math.abs(delta.y) && this.is(\"valid\")) {\n                    return;\n                }\n                event.preventDefault();\n                this.enter(\"dragging\");\n                this.trigger(\"drag\");\n            }, this));\n        };\n        /**\n    \t * Handles the `touchmove` and `mousemove` events.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */ Owl.prototype.onDragMove = function(event) {\n            var minimum = null, maximum = null, pull = null, delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this.difference(this._drag.stage.start, delta);\n            if (!this.is(\"dragging\")) {\n                return;\n            }\n            event.preventDefault();\n            if (this.settings.loop) {\n                minimum = this.coordinates(this.minimum());\n                maximum = this.coordinates(this.maximum() + 1) - minimum;\n                stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;\n            } else {\n                minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n                maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n                pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n                stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n            }\n            this._drag.stage.current = stage;\n            this.animate(stage.x);\n        };\n        /**\n    \t * Handles the `touchend` and `mouseup` events.\n    \t * @todo #261\n    \t * @todo Threshold for click event\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */ Owl.prototype.onDragEnd = function(event) {\n            var delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this._drag.stage.current, direction = delta.x > 0 ^ this.settings.rtl ? \"left\" : \"right\";\n            $(document1).off(\".owl.core\");\n            this.$element.removeClass(this.options.grabClass);\n            if (delta.x !== 0 && this.is(\"dragging\") || !this.is(\"valid\")) {\n                this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n                this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n                this.invalidate(\"position\");\n                this.update();\n                this._drag.direction = direction;\n                if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n                    this._drag.target.one(\"click.owl.core\", function() {\n                        return false;\n                    });\n                }\n            }\n            if (!this.is(\"dragging\")) {\n                return;\n            }\n            this.leave(\"dragging\");\n            this.trigger(\"dragged\");\n        };\n        /**\n    \t * Gets absolute position of the closest item for a coordinate.\n    \t * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n    \t * @protected\n    \t * @param {Number} coordinate - The coordinate in pixel.\n    \t * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\n    \t * @return {Number} - The absolute position of the closest item.\n    \t */ Owl.prototype.closest = function(coordinate, direction) {\n            var position = -1, pull = 30, width = this.width(), coordinates = this.coordinates();\n            if (!this.settings.freeDrag) {\n                // check closest item\n                $.each(coordinates, $.proxy(function(index, value) {\n                    // on a left pull, check on current index\n                    if (direction === \"left\" && coordinate > value - pull && coordinate < value + pull) {\n                        position = index;\n                    // on a right pull, check on previous index\n                    // to do so, subtract width from value and set position = index + 1\n                    } else if (direction === \"right\" && coordinate > value - width - pull && coordinate < value - width + pull) {\n                        position = index + 1;\n                    } else if (this.op(coordinate, \"<\", value) && this.op(coordinate, \">\", coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {\n                        position = direction === \"left\" ? index + 1 : index;\n                    }\n                    return position === -1;\n                }, this));\n            }\n            if (!this.settings.loop) {\n                // non loop boundries\n                if (this.op(coordinate, \">\", coordinates[this.minimum()])) {\n                    position = coordinate = this.minimum();\n                } else if (this.op(coordinate, \"<\", coordinates[this.maximum()])) {\n                    position = coordinate = this.maximum();\n                }\n            }\n            return position;\n        };\n        /**\n    \t * Animates the stage.\n    \t * @todo #270\n    \t * @public\n    \t * @param {Number} coordinate - The coordinate in pixels.\n    \t */ Owl.prototype.animate = function(coordinate) {\n            var animate = this.speed() > 0;\n            this.is(\"animating\") && this.onTransitionEnd();\n            if (animate) {\n                this.enter(\"animating\");\n                this.trigger(\"translate\");\n            }\n            if ($.support.transform3d && $.support.transition) {\n                this.$stage.css({\n                    transform: \"translate3d(\" + coordinate + \"px,0px,0px)\",\n                    transition: this.speed() / 1000 + \"s\" + (this.settings.slideTransition ? \" \" + this.settings.slideTransition : \"\")\n                });\n            } else if (animate) {\n                this.$stage.animate({\n                    left: coordinate + \"px\"\n                }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n            } else {\n                this.$stage.css({\n                    left: coordinate + \"px\"\n                });\n            }\n        };\n        /**\n    \t * Checks whether the carousel is in a specific state or not.\n    \t * @param {String} state - The state to check.\n    \t * @returns {Boolean} - The flag which indicates if the carousel is busy.\n    \t */ Owl.prototype.is = function(state) {\n            return this._states.current[state] && this._states.current[state] > 0;\n        };\n        /**\n    \t * Sets the absolute position of the current item.\n    \t * @public\n    \t * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\n    \t * @returns {Number} - The absolute position of the current item.\n    \t */ Owl.prototype.current = function(position) {\n            if (position === undefined) {\n                return this._current;\n            }\n            if (this._items.length === 0) {\n                return undefined;\n            }\n            position = this.normalize(position);\n            if (this._current !== position) {\n                var event = this.trigger(\"change\", {\n                    property: {\n                        name: \"position\",\n                        value: position\n                    }\n                });\n                if (event.data !== undefined) {\n                    position = this.normalize(event.data);\n                }\n                this._current = position;\n                this.invalidate(\"position\");\n                this.trigger(\"changed\", {\n                    property: {\n                        name: \"position\",\n                        value: this._current\n                    }\n                });\n            }\n            return this._current;\n        };\n        /**\n    \t * Invalidates the given part of the update routine.\n    \t * @param {String} [part] - The part to invalidate.\n    \t * @returns {Array.<String>} - The invalidated parts.\n    \t */ Owl.prototype.invalidate = function(part) {\n            if ($.type(part) === \"string\") {\n                this._invalidated[part] = true;\n                this.is(\"valid\") && this.leave(\"valid\");\n            }\n            return $.map(this._invalidated, function(v, i) {\n                return i;\n            });\n        };\n        /**\n    \t * Resets the absolute position of the current item.\n    \t * @public\n    \t * @param {Number} position - The absolute position of the new item.\n    \t */ Owl.prototype.reset = function(position) {\n            position = this.normalize(position);\n            if (position === undefined) {\n                return;\n            }\n            this._speed = 0;\n            this._current = position;\n            this.suppress([\n                \"translate\",\n                \"translated\"\n            ]);\n            this.animate(this.coordinates(position));\n            this.release([\n                \"translate\",\n                \"translated\"\n            ]);\n        };\n        /**\n    \t * Normalizes an absolute or a relative position of an item.\n    \t * @public\n    \t * @param {Number} position - The absolute or relative position to normalize.\n    \t * @param {Boolean} [relative=false] - Whether the given position is relative or not.\n    \t * @returns {Number} - The normalized position.\n    \t */ Owl.prototype.normalize = function(position, relative) {\n            var n = this._items.length, m = relative ? 0 : this._clones.length;\n            if (!this.isNumeric(position) || n < 1) {\n                position = undefined;\n            } else if (position < 0 || position >= n + m) {\n                position = ((position - m / 2) % n + n) % n + m / 2;\n            }\n            return position;\n        };\n        /**\n    \t * Converts an absolute position of an item into a relative one.\n    \t * @public\n    \t * @param {Number} position - The absolute position to convert.\n    \t * @returns {Number} - The converted position.\n    \t */ Owl.prototype.relative = function(position) {\n            position -= this._clones.length / 2;\n            return this.normalize(position, true);\n        };\n        /**\n    \t * Gets the maximum position for the current item.\n    \t * @public\n    \t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n    \t * @returns {Number}\n    \t */ Owl.prototype.maximum = function(relative) {\n            var settings = this.settings, maximum = this._coordinates.length, iterator, reciprocalItemsWidth, elementWidth;\n            if (settings.loop) {\n                maximum = this._clones.length / 2 + this._items.length - 1;\n            } else if (settings.autoWidth || settings.merge) {\n                iterator = this._items.length;\n                if (iterator) {\n                    reciprocalItemsWidth = this._items[--iterator].width();\n                    elementWidth = this.$element.width();\n                    while(iterator--){\n                        reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n                        if (reciprocalItemsWidth > elementWidth) {\n                            break;\n                        }\n                    }\n                }\n                maximum = iterator + 1;\n            } else if (settings.center) {\n                maximum = this._items.length - 1;\n            } else {\n                maximum = this._items.length - settings.items;\n            }\n            if (relative) {\n                maximum -= this._clones.length / 2;\n            }\n            return Math.max(maximum, 0);\n        };\n        /**\n    \t * Gets the minimum position for the current item.\n    \t * @public\n    \t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n    \t * @returns {Number}\n    \t */ Owl.prototype.minimum = function(relative) {\n            return relative ? 0 : this._clones.length / 2;\n        };\n        /**\n    \t * Gets an item at the specified relative position.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n    \t */ Owl.prototype.items = function(position) {\n            if (position === undefined) {\n                return this._items.slice();\n            }\n            position = this.normalize(position, true);\n            return this._items[position];\n        };\n        /**\n    \t * Gets an item at the specified relative position.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n    \t */ Owl.prototype.mergers = function(position) {\n            if (position === undefined) {\n                return this._mergers.slice();\n            }\n            position = this.normalize(position, true);\n            return this._mergers[position];\n        };\n        /**\n    \t * Gets the absolute positions of clones for an item.\n    \t * @public\n    \t * @param {Number} [position] - The relative position of the item.\n    \t * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\n    \t */ Owl.prototype.clones = function(position) {\n            var odd = this._clones.length / 2, even = odd + this._items.length, map = function(index) {\n                return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;\n            };\n            if (position === undefined) {\n                return $.map(this._clones, function(v, i) {\n                    return map(i);\n                });\n            }\n            return $.map(this._clones, function(v, i) {\n                return v === position ? map(i) : null;\n            });\n        };\n        /**\n    \t * Sets the current animation speed.\n    \t * @public\n    \t * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\n    \t * @returns {Number} - The current animation speed in milliseconds.\n    \t */ Owl.prototype.speed = function(speed) {\n            if (speed !== undefined) {\n                this._speed = speed;\n            }\n            return this._speed;\n        };\n        /**\n    \t * Gets the coordinate of an item.\n    \t * @todo The name of this method is missleanding.\n    \t * @public\n    \t * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\n    \t * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\n    \t */ Owl.prototype.coordinates = function(position) {\n            var multiplier = 1, newPosition = position - 1, coordinate;\n            if (position === undefined) {\n                return $.map(this._coordinates, $.proxy(function(coordinate, index) {\n                    return this.coordinates(index);\n                }, this));\n            }\n            if (this.settings.center) {\n                if (this.settings.rtl) {\n                    multiplier = -1;\n                    newPosition = position + 1;\n                }\n                coordinate = this._coordinates[position];\n                coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n            } else {\n                coordinate = this._coordinates[newPosition] || 0;\n            }\n            coordinate = Math.ceil(coordinate);\n            return coordinate;\n        };\n        /**\n    \t * Calculates the speed for a translation.\n    \t * @protected\n    \t * @param {Number} from - The absolute position of the start item.\n    \t * @param {Number} to - The absolute position of the target item.\n    \t * @param {Number} [factor=undefined] - The time factor in milliseconds.\n    \t * @returns {Number} - The time in milliseconds for the translation.\n    \t */ Owl.prototype.duration = function(from, to, factor) {\n            if (factor === 0) {\n                return 0;\n            }\n            return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);\n        };\n        /**\n    \t * Slides to the specified item.\n    \t * @public\n    \t * @param {Number} position - The position of the item.\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */ Owl.prototype.to = function(position, speed) {\n            var current = this.current(), revert = null, distance = position - this.relative(current), direction = (distance > 0) - (distance < 0), items = this._items.length, minimum = this.minimum(), maximum = this.maximum();\n            if (this.settings.loop) {\n                if (!this.settings.rewind && Math.abs(distance) > items / 2) {\n                    distance += direction * -1 * items;\n                }\n                position = current + distance;\n                revert = ((position - minimum) % items + items) % items + minimum;\n                if (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n                    current = revert - distance;\n                    position = revert;\n                    this.reset(current);\n                }\n            } else if (this.settings.rewind) {\n                maximum += 1;\n                position = (position % maximum + maximum) % maximum;\n            } else {\n                position = Math.max(minimum, Math.min(maximum, position));\n            }\n            this.speed(this.duration(current, position, speed));\n            this.current(position);\n            if (this.isVisible()) {\n                this.update();\n            }\n        };\n        /**\n    \t * Slides to the next item.\n    \t * @public\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */ Owl.prototype.next = function(speed) {\n            speed = speed || false;\n            this.to(this.relative(this.current()) + 1, speed);\n        };\n        /**\n    \t * Slides to the previous item.\n    \t * @public\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t */ Owl.prototype.prev = function(speed) {\n            speed = speed || false;\n            this.to(this.relative(this.current()) - 1, speed);\n        };\n        /**\n    \t * Handles the end of an animation.\n    \t * @protected\n    \t * @param {Event} event - The event arguments.\n    \t */ Owl.prototype.onTransitionEnd = function(event) {\n            // if css2 animation then event object is undefined\n            if (event !== undefined) {\n                event.stopPropagation();\n                // Catch only owl-stage transitionEnd event\n                if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n                    return false;\n                }\n            }\n            this.leave(\"animating\");\n            this.trigger(\"translated\");\n        };\n        /**\n    \t * Gets viewport width.\n    \t * @protected\n    \t * @return {Number} - The width in pixel.\n    \t */ Owl.prototype.viewport = function() {\n            var width;\n            if (this.options.responsiveBaseElement !== window1) {\n                width = $(this.options.responsiveBaseElement).width();\n            } else if (window1.innerWidth) {\n                width = window1.innerWidth;\n            } else if (document1.documentElement && document1.documentElement.clientWidth) {\n                width = document1.documentElement.clientWidth;\n            } else {\n                console.warn(\"Can not detect viewport width.\");\n            }\n            return width;\n        };\n        /**\n    \t * Replaces the current content.\n    \t * @public\n    \t * @param {HTMLElement|jQuery|String} content - The new content.\n    \t */ Owl.prototype.replace = function(content) {\n            this.$stage.empty();\n            this._items = [];\n            if (content) {\n                content = content instanceof jQuery ? content : $(content);\n            }\n            if (this.settings.nestedItemSelector) {\n                content = content.find(\".\" + this.settings.nestedItemSelector);\n            }\n            content.filter(function() {\n                return this.nodeType === 1;\n            }).each($.proxy(function(index, item) {\n                item = this.prepare(item);\n                this.$stage.append(item);\n                this._items.push(item);\n                this._mergers.push(item.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") * 1 || 1);\n            }, this));\n            this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n            this.invalidate(\"items\");\n        };\n        /**\n    \t * Adds an item.\n    \t * @todo Use `item` instead of `content` for the event arguments.\n    \t * @public\n    \t * @param {HTMLElement|jQuery|String} content - The item content to add.\n    \t * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\n    \t */ Owl.prototype.add = function(content, position) {\n            var current = this.relative(this._current);\n            position = position === undefined ? this._items.length : this.normalize(position, true);\n            content = content instanceof jQuery ? content : $(content);\n            this.trigger(\"add\", {\n                content: content,\n                position: position\n            });\n            content = this.prepare(content);\n            if (this._items.length === 0 || position === this._items.length) {\n                this._items.length === 0 && this.$stage.append(content);\n                this._items.length !== 0 && this._items[position - 1].after(content);\n                this._items.push(content);\n                this._mergers.push(content.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") * 1 || 1);\n            } else {\n                this._items[position].before(content);\n                this._items.splice(position, 0, content);\n                this._mergers.splice(position, 0, content.find(\"[data-merge]\").addBack(\"[data-merge]\").attr(\"data-merge\") * 1 || 1);\n            }\n            this._items[current] && this.reset(this._items[current].index());\n            this.invalidate(\"items\");\n            this.trigger(\"added\", {\n                content: content,\n                position: position\n            });\n        };\n        /**\n    \t * Removes an item by its position.\n    \t * @todo Use `item` instead of `content` for the event arguments.\n    \t * @public\n    \t * @param {Number} position - The relative position of the item to remove.\n    \t */ Owl.prototype.remove = function(position) {\n            position = this.normalize(position, true);\n            if (position === undefined) {\n                return;\n            }\n            this.trigger(\"remove\", {\n                content: this._items[position],\n                position: position\n            });\n            this._items[position].remove();\n            this._items.splice(position, 1);\n            this._mergers.splice(position, 1);\n            this.invalidate(\"items\");\n            this.trigger(\"removed\", {\n                content: null,\n                position: position\n            });\n        };\n        /**\n    \t * Preloads images with auto width.\n    \t * @todo Replace by a more generic approach\n    \t * @protected\n    \t */ Owl.prototype.preloadAutoWidthImages = function(images) {\n            images.each($.proxy(function(i, element) {\n                this.enter(\"pre-loading\");\n                element = $(element);\n                $(new Image()).one(\"load\", $.proxy(function(e) {\n                    element.attr(\"src\", e.target.src);\n                    element.css(\"opacity\", 1);\n                    this.leave(\"pre-loading\");\n                    !this.is(\"pre-loading\") && !this.is(\"initializing\") && this.refresh();\n                }, this)).attr(\"src\", element.attr(\"src\") || element.attr(\"data-src\") || element.attr(\"data-src-retina\"));\n            }, this));\n        };\n        /**\n    \t * Destroys the carousel.\n    \t * @public\n    \t */ Owl.prototype.destroy = function() {\n            this.$element.off(\".owl.core\");\n            this.$stage.off(\".owl.core\");\n            $(document1).off(\".owl.core\");\n            if (this.settings.responsive !== false) {\n                window1.clearTimeout(this.resizeTimer);\n                this.off(window1, \"resize\", this._handlers.onThrottledResize);\n            }\n            for(var i in this._plugins){\n                this._plugins[i].destroy();\n            }\n            this.$stage.children(\".cloned\").remove();\n            this.$stage.unwrap();\n            this.$stage.children().contents().unwrap();\n            this.$stage.children().unwrap();\n            this.$stage.remove();\n            this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr(\"class\", this.$element.attr(\"class\").replace(new RegExp(this.options.responsiveClass + \"-\\\\S+\\\\s\", \"g\"), \"\")).removeData(\"owl.carousel\");\n        };\n        /**\n    \t * Operators to calculate right-to-left and left-to-right.\n    \t * @protected\n    \t * @param {Number} [a] - The left side operand.\n    \t * @param {String} [o] - The operator.\n    \t * @param {Number} [b] - The right side operand.\n    \t */ Owl.prototype.op = function(a, o, b) {\n            var rtl = this.settings.rtl;\n            switch(o){\n                case \"<\":\n                    return rtl ? a > b : a < b;\n                case \">\":\n                    return rtl ? a < b : a > b;\n                case \">=\":\n                    return rtl ? a <= b : a >= b;\n                case \"<=\":\n                    return rtl ? a >= b : a <= b;\n                default:\n                    break;\n            }\n        };\n        /**\n    \t * Attaches to an internal event.\n    \t * @protected\n    \t * @param {HTMLElement} element - The event source.\n    \t * @param {String} event - The event name.\n    \t * @param {Function} listener - The event handler to attach.\n    \t * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\n    \t */ Owl.prototype.on = function(element, event, listener, capture) {\n            if (element.addEventListener) {\n                element.addEventListener(event, listener, capture);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + event, listener);\n            }\n        };\n        /**\n    \t * Detaches from an internal event.\n    \t * @protected\n    \t * @param {HTMLElement} element - The event source.\n    \t * @param {String} event - The event name.\n    \t * @param {Function} listener - The attached event handler to detach.\n    \t * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\n    \t */ Owl.prototype.off = function(element, event, listener, capture) {\n            if (element.removeEventListener) {\n                element.removeEventListener(event, listener, capture);\n            } else if (element.detachEvent) {\n                element.detachEvent(\"on\" + event, listener);\n            }\n        };\n        /**\n    \t * Triggers a public event.\n    \t * @todo Remove `status`, `relatedTarget` should be used instead.\n    \t * @protected\n    \t * @param {String} name - The event name.\n    \t * @param {*} [data=null] - The event data.\n    \t * @param {String} [namespace=carousel] - The event namespace.\n    \t * @param {String} [state] - The state which is associated with the event.\n    \t * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\n    \t * @returns {Event} - The event arguments.\n    \t */ Owl.prototype.trigger = function(name, data, namespace, state, enter) {\n            var status = {\n                item: {\n                    count: this._items.length,\n                    index: this.current()\n                }\n            }, handler = $.camelCase($.grep([\n                \"on\",\n                name,\n                namespace\n            ], function(v) {\n                return v;\n            }).join(\"-\").toLowerCase()), event = $.Event([\n                name,\n                \"owl\",\n                namespace || \"carousel\"\n            ].join(\".\").toLowerCase(), $.extend({\n                relatedTarget: this\n            }, status, data));\n            if (!this._supress[name]) {\n                $.each(this._plugins, function(name, plugin) {\n                    if (plugin.onTrigger) {\n                        plugin.onTrigger(event);\n                    }\n                });\n                this.register({\n                    type: Owl.Type.Event,\n                    name: name\n                });\n                this.$element.trigger(event);\n                if (this.settings && typeof this.settings[handler] === \"function\") {\n                    this.settings[handler].call(this, event);\n                }\n            }\n            return event;\n        };\n        /**\n    \t * Enters a state.\n    \t * @param name - The state name.\n    \t */ Owl.prototype.enter = function(name) {\n            $.each([\n                name\n            ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n                if (this._states.current[name] === undefined) {\n                    this._states.current[name] = 0;\n                }\n                this._states.current[name]++;\n            }, this));\n        };\n        /**\n    \t * Leaves a state.\n    \t * @param name - The state name.\n    \t */ Owl.prototype.leave = function(name) {\n            $.each([\n                name\n            ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n                this._states.current[name]--;\n            }, this));\n        };\n        /**\n    \t * Registers an event or state.\n    \t * @public\n    \t * @param {Object} object - The event or state to register.\n    \t */ Owl.prototype.register = function(object) {\n            if (object.type === Owl.Type.Event) {\n                if (!$.event.special[object.name]) {\n                    $.event.special[object.name] = {};\n                }\n                if (!$.event.special[object.name].owl) {\n                    var _default = $.event.special[object.name]._default;\n                    $.event.special[object.name]._default = function(e) {\n                        if (_default && _default.apply && (!e.namespace || e.namespace.indexOf(\"owl\") === -1)) {\n                            return _default.apply(this, arguments);\n                        }\n                        return e.namespace && e.namespace.indexOf(\"owl\") > -1;\n                    };\n                    $.event.special[object.name].owl = true;\n                }\n            } else if (object.type === Owl.Type.State) {\n                if (!this._states.tags[object.name]) {\n                    this._states.tags[object.name] = object.tags;\n                } else {\n                    this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n                }\n                this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function(tag, i) {\n                    return $.inArray(tag, this._states.tags[object.name]) === i;\n                }, this));\n            }\n        };\n        /**\n    \t * Suppresses events.\n    \t * @protected\n    \t * @param {Array.<String>} events - The events to suppress.\n    \t */ Owl.prototype.suppress = function(events) {\n            $.each(events, $.proxy(function(index, event) {\n                this._supress[event] = true;\n            }, this));\n        };\n        /**\n    \t * Releases suppressed events.\n    \t * @protected\n    \t * @param {Array.<String>} events - The events to release.\n    \t */ Owl.prototype.release = function(events) {\n            $.each(events, $.proxy(function(index, event) {\n                delete this._supress[event];\n            }, this));\n        };\n        /**\n    \t * Gets unified pointer coordinates from event.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Event} - The `mousedown` or `touchstart` event.\n    \t * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\n    \t */ Owl.prototype.pointer = function(event) {\n            var result = {\n                x: null,\n                y: null\n            };\n            event = event.originalEvent || event || window1.event;\n            event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;\n            if (event.pageX) {\n                result.x = event.pageX;\n                result.y = event.pageY;\n            } else {\n                result.x = event.clientX;\n                result.y = event.clientY;\n            }\n            return result;\n        };\n        /**\n    \t * Determines if the input is a Number or something that can be coerced to a Number\n    \t * @protected\n    \t * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\n    \t * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\n    \t */ Owl.prototype.isNumeric = function(number) {\n            return !isNaN(parseFloat(number));\n        };\n        /**\n    \t * Gets the difference of two vectors.\n    \t * @todo #261\n    \t * @protected\n    \t * @param {Object} - The first vector.\n    \t * @param {Object} - The second vector.\n    \t * @returns {Object} - The difference.\n    \t */ Owl.prototype.difference = function(first, second) {\n            return {\n                x: first.x - second.x,\n                y: first.y - second.y\n            };\n        };\n        /**\n    \t * The jQuery Plugin for the Owl Carousel\n    \t * @todo Navigation plugin `next` and `prev`\n    \t * @public\n    \t */ $.fn.owlCarousel = function(option) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            return this.each(function() {\n                var $this = $(this), data = $this.data(\"owl.carousel\");\n                if (!data) {\n                    data = new Owl(this, typeof option == \"object\" && option);\n                    $this.data(\"owl.carousel\", data);\n                    $.each([\n                        \"next\",\n                        \"prev\",\n                        \"to\",\n                        \"destroy\",\n                        \"refresh\",\n                        \"replace\",\n                        \"add\",\n                        \"remove\"\n                    ], function(i, event) {\n                        data.register({\n                            type: Owl.Type.Event,\n                            name: event\n                        });\n                        data.$element.on(event + \".owl.carousel.core\", $.proxy(function(e) {\n                            if (e.namespace && e.relatedTarget !== this) {\n                                this.suppress([\n                                    event\n                                ]);\n                                data[event].apply(this, [].slice.call(arguments, 1));\n                                this.release([\n                                    event\n                                ]);\n                            }\n                        }, data));\n                    });\n                }\n                if (typeof option == \"string\" && option.charAt(0) !== \"_\") {\n                    data[option].apply(data, args);\n                }\n            });\n        };\n        /**\n    \t * The constructor for the jQuery Plugin\n    \t * @public\n    \t */ $.fn.owlCarousel.Constructor = Owl;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the auto refresh plugin.\n    \t * @class The Auto Refresh Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */ var AutoRefresh = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * Refresh interval.\n    \t\t * @protected\n    \t\t * @type {number}\n    \t\t */ this._interval = null;\n            /**\n    \t\t * Whether the element is currently visible or not.\n    \t\t * @protected\n    \t\t * @type {Boolean}\n    \t\t */ this._visible = null;\n            /**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"initialized.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.autoRefresh) {\n                        this.watch();\n                    }\n                }, this)\n            };\n            // set default options\n            this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);\n            // register event handlers\n            this._core.$element.on(this._handlers);\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ AutoRefresh.Defaults = {\n            autoRefresh: true,\n            autoRefreshInterval: 500\n        };\n        /**\n    \t * Watches the element.\n    \t */ AutoRefresh.prototype.watch = function() {\n            if (this._interval) {\n                return;\n            }\n            this._visible = this._core.isVisible();\n            this._interval = window1.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n        };\n        /**\n    \t * Refreshes the element.\n    \t */ AutoRefresh.prototype.refresh = function() {\n            if (this._core.isVisible() === this._visible) {\n                return;\n            }\n            this._visible = !this._visible;\n            this._core.$element.toggleClass(\"owl-hidden\", !this._visible);\n            this._visible && this._core.invalidate(\"width\") && this._core.refresh();\n        };\n        /**\n    \t * Destroys the plugin.\n    \t */ AutoRefresh.prototype.destroy = function() {\n            var handler, property;\n            window1.clearInterval(this._interval);\n            for(handler in this._handlers){\n                this._core.$element.off(handler, this._handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the lazy plugin.\n    \t * @class The Lazy Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */ var Lazy = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * Already loaded items.\n    \t\t * @protected\n    \t\t * @type {Array.<jQuery>}\n    \t\t */ this._loaded = [];\n            /**\n    \t\t * Event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"initialized.owl.carousel change.owl.carousel resized.owl.carousel\": $.proxy(function(e) {\n                    if (!e.namespace) {\n                        return;\n                    }\n                    if (!this._core.settings || !this._core.settings.lazyLoad) {\n                        return;\n                    }\n                    if (e.property && e.property.name == \"position\" || e.type == \"initialized\") {\n                        var settings = this._core.settings, n = settings.center && Math.ceil(settings.items / 2) || settings.items, i = settings.center && n * -1 || 0, position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i, clones = this._core.clones().length, load = $.proxy(function(i, v) {\n                            this.load(v);\n                        }, this);\n                        //TODO: Need documentation for this new option\n                        if (settings.lazyLoadEager > 0) {\n                            n += settings.lazyLoadEager;\n                            // If the carousel is looping also preload images that are to the \"left\"\n                            if (settings.loop) {\n                                position -= settings.lazyLoadEager;\n                                n++;\n                            }\n                        }\n                        while(i++ < n){\n                            this.load(clones / 2 + this._core.relative(position));\n                            clones && $.each(this._core.clones(this._core.relative(position)), load);\n                            position++;\n                        }\n                    }\n                }, this)\n            };\n            // set the default options\n            this._core.options = $.extend({}, Lazy.Defaults, this._core.options);\n            // register event handler\n            this._core.$element.on(this._handlers);\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ Lazy.Defaults = {\n            lazyLoad: false,\n            lazyLoadEager: 0\n        };\n        /**\n    \t * Loads all resources of an item at the specified position.\n    \t * @param {Number} position - The absolute position of the item.\n    \t * @protected\n    \t */ Lazy.prototype.load = function(position) {\n            var $item = this._core.$stage.children().eq(position), $elements = $item && $item.find(\".owl-lazy\");\n            if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n                return;\n            }\n            $elements.each($.proxy(function(index, element) {\n                var $element = $(element), image, url = window1.devicePixelRatio > 1 && $element.attr(\"data-src-retina\") || $element.attr(\"data-src\") || $element.attr(\"data-srcset\");\n                this._core.trigger(\"load\", {\n                    element: $element,\n                    url: url\n                }, \"lazy\");\n                if ($element.is(\"img\")) {\n                    $element.one(\"load.owl.lazy\", $.proxy(function() {\n                        $element.css(\"opacity\", 1);\n                        this._core.trigger(\"loaded\", {\n                            element: $element,\n                            url: url\n                        }, \"lazy\");\n                    }, this)).attr(\"src\", url);\n                } else if ($element.is(\"source\")) {\n                    $element.one(\"load.owl.lazy\", $.proxy(function() {\n                        this._core.trigger(\"loaded\", {\n                            element: $element,\n                            url: url\n                        }, \"lazy\");\n                    }, this)).attr(\"srcset\", url);\n                } else {\n                    image = new Image();\n                    image.onload = $.proxy(function() {\n                        $element.css({\n                            \"background-image\": 'url(\"' + url + '\")',\n                            \"opacity\": \"1\"\n                        });\n                        this._core.trigger(\"loaded\", {\n                            element: $element,\n                            url: url\n                        }, \"lazy\");\n                    }, this);\n                    image.src = url;\n                }\n            }, this));\n            this._loaded.push($item.get(0));\n        };\n        /**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */ Lazy.prototype.destroy = function() {\n            var handler, property;\n            for(handler in this.handlers){\n                this._core.$element.off(handler, this.handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the auto height plugin.\n    \t * @class The Auto Height Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */ var AutoHeight = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            this._previousHeight = null;\n            /**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"initialized.owl.carousel refreshed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.autoHeight) {\n                        this.update();\n                    }\n                }, this),\n                \"changed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.autoHeight && e.property.name === \"position\") {\n                        this.update();\n                    }\n                }, this),\n                \"loaded.owl.lazy\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.autoHeight && e.element.closest(\".\" + this._core.settings.itemClass).index() === this._core.current()) {\n                        this.update();\n                    }\n                }, this)\n            };\n            // set default options\n            this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);\n            // register event handlers\n            this._core.$element.on(this._handlers);\n            this._intervalId = null;\n            var refThis = this;\n            // These changes have been taken from a PR by gavrochelegnou proposed in #1575\n            // and have been made compatible with the latest jQuery version\n            $(window1).on(\"load\", function() {\n                if (refThis._core.settings.autoHeight) {\n                    refThis.update();\n                }\n            });\n            // Autoresize the height of the carousel when window is resized\n            // When carousel has images, the height is dependent on the width\n            // and should also change on resize\n            $(window1).resize(function() {\n                if (refThis._core.settings.autoHeight) {\n                    if (refThis._intervalId != null) {\n                        clearTimeout(refThis._intervalId);\n                    }\n                    refThis._intervalId = setTimeout(function() {\n                        refThis.update();\n                    }, 250);\n                }\n            });\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ AutoHeight.Defaults = {\n            autoHeight: false,\n            autoHeightClass: \"owl-height\"\n        };\n        /**\n    \t * Updates the view.\n    \t */ AutoHeight.prototype.update = function() {\n            var start = this._core._current, end = start + this._core.settings.items, lazyLoadEnabled = this._core.settings.lazyLoad, visible = this._core.$stage.children().toArray().slice(start, end), heights = [], maxheight = 0;\n            $.each(visible, function(index, item) {\n                heights.push($(item).height());\n            });\n            maxheight = Math.max.apply(null, heights);\n            if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {\n                maxheight = this._previousHeight;\n            }\n            this._previousHeight = maxheight;\n            this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);\n        };\n        AutoHeight.prototype.destroy = function() {\n            var handler, property;\n            for(handler in this._handlers){\n                this._core.$element.off(handler, this._handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] !== \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the video plugin.\n    \t * @class The Video Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */ var Video = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * Cache all video URLs.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._videos = {};\n            /**\n    \t\t * Current playing item.\n    \t\t * @protected\n    \t\t * @type {jQuery}\n    \t\t */ this._playing = null;\n            /**\n    \t\t * All event handlers.\n    \t\t * @todo The cloned content removale is too late\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"initialized.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace) {\n                        this._core.register({\n                            type: \"state\",\n                            name: \"playing\",\n                            tags: [\n                                \"interacting\"\n                            ]\n                        });\n                    }\n                }, this),\n                \"resize.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n                        e.preventDefault();\n                    }\n                }, this),\n                \"refreshed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.is(\"resizing\")) {\n                        this._core.$stage.find(\".cloned .owl-video-frame\").remove();\n                    }\n                }, this),\n                \"changed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && e.property.name === \"position\" && this._playing) {\n                        this.stop();\n                    }\n                }, this),\n                \"prepared.owl.carousel\": $.proxy(function(e) {\n                    if (!e.namespace) {\n                        return;\n                    }\n                    var $element = $(e.content).find(\".owl-video\");\n                    if ($element.length) {\n                        $element.css(\"display\", \"none\");\n                        this.fetch($element, $(e.content));\n                    }\n                }, this)\n            };\n            // set default options\n            this._core.options = $.extend({}, Video.Defaults, this._core.options);\n            // register event handlers\n            this._core.$element.on(this._handlers);\n            this._core.$element.on(\"click.owl.video\", \".owl-video-play-icon\", $.proxy(function(e) {\n                this.play(e);\n            }, this));\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ Video.Defaults = {\n            video: false,\n            videoHeight: false,\n            videoWidth: false\n        };\n        /**\n    \t * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\n    \t * @protected\n    \t * @param {jQuery} target - The target containing the video data.\n    \t * @param {jQuery} item - The item containing the video.\n    \t */ Video.prototype.fetch = function(target, item) {\n            var type = function() {\n                if (target.attr(\"data-vimeo-id\")) {\n                    return \"vimeo\";\n                } else if (target.attr(\"data-vzaar-id\")) {\n                    return \"vzaar\";\n                } else {\n                    return \"youtube\";\n                }\n            }(), id = target.attr(\"data-vimeo-id\") || target.attr(\"data-youtube-id\") || target.attr(\"data-vzaar-id\"), width = target.attr(\"data-width\") || this._core.settings.videoWidth, height = target.attr(\"data-height\") || this._core.settings.videoHeight, url = target.attr(\"href\");\n            if (url) {\n                /*\n    \t\t\t\t\tParses the id's out of the following urls (and probably more):\n    \t\t\t\t\thttps://www.youtube.com/watch?v=:id\n    \t\t\t\t\thttps://youtu.be/:id\n    \t\t\t\t\thttps://vimeo.com/:id\n    \t\t\t\t\thttps://vimeo.com/channels/:channel/:id\n    \t\t\t\t\thttps://vimeo.com/groups/:group/videos/:id\n    \t\t\t\t\thttps://app.vzaar.com/videos/:id\n\n    \t\t\t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\n    \t\t\t*/ id = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com|be\\-nocookie\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n                if (id[3].indexOf(\"youtu\") > -1) {\n                    type = \"youtube\";\n                } else if (id[3].indexOf(\"vimeo\") > -1) {\n                    type = \"vimeo\";\n                } else if (id[3].indexOf(\"vzaar\") > -1) {\n                    type = \"vzaar\";\n                } else {\n                    throw new Error(\"Video URL not supported.\");\n                }\n                id = id[6];\n            } else {\n                throw new Error(\"Missing video URL.\");\n            }\n            this._videos[url] = {\n                type: type,\n                id: id,\n                width: width,\n                height: height\n            };\n            item.attr(\"data-video\", url);\n            this.thumbnail(target, this._videos[url]);\n        };\n        /**\n    \t * Creates video thumbnail.\n    \t * @protected\n    \t * @param {jQuery} target - The target containing the video data.\n    \t * @param {Object} info - The video info object.\n    \t * @see `fetch`\n    \t */ Video.prototype.thumbnail = function(target, video) {\n            var tnLink, icon, path, dimensions = video.width && video.height ? \"width:\" + video.width + \"px;height:\" + video.height + \"px;\" : \"\", customTn = target.find(\"img\"), srcType = \"src\", lazyClass = \"\", settings = this._core.settings, create = function(path) {\n                icon = '<div class=\"owl-video-play-icon\"></div>';\n                if (settings.lazyLoad) {\n                    tnLink = $(\"<div/>\", {\n                        \"class\": \"owl-video-tn \" + lazyClass,\n                        \"srcType\": path\n                    });\n                } else {\n                    tnLink = $(\"<div/>\", {\n                        \"class\": \"owl-video-tn\",\n                        \"style\": \"opacity:1;background-image:url(\" + path + \")\"\n                    });\n                }\n                target.after(tnLink);\n                target.after(icon);\n            };\n            // wrap video content into owl-video-wrapper div\n            target.wrap($(\"<div/>\", {\n                \"class\": \"owl-video-wrapper\",\n                \"style\": dimensions\n            }));\n            if (this._core.settings.lazyLoad) {\n                srcType = \"data-src\";\n                lazyClass = \"owl-lazy\";\n            }\n            // custom thumbnail\n            if (customTn.length) {\n                create(customTn.attr(srcType));\n                customTn.remove();\n                return false;\n            }\n            if (video.type === \"youtube\") {\n                path = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n                create(path);\n            } else if (video.type === \"vimeo\") {\n                $.ajax({\n                    type: \"GET\",\n                    url: \"//vimeo.com/api/v2/video/\" + video.id + \".json\",\n                    jsonp: \"callback\",\n                    dataType: \"jsonp\",\n                    success: function(data) {\n                        path = data[0].thumbnail_large;\n                        create(path);\n                    }\n                });\n            } else if (video.type === \"vzaar\") {\n                $.ajax({\n                    type: \"GET\",\n                    url: \"//vzaar.com/api/videos/\" + video.id + \".json\",\n                    jsonp: \"callback\",\n                    dataType: \"jsonp\",\n                    success: function(data) {\n                        path = data.framegrab_url;\n                        create(path);\n                    }\n                });\n            }\n        };\n        /**\n    \t * Stops the current video.\n    \t * @public\n    \t */ Video.prototype.stop = function() {\n            this._core.trigger(\"stop\", null, \"video\");\n            this._playing.find(\".owl-video-frame\").remove();\n            this._playing.removeClass(\"owl-video-playing\");\n            this._playing = null;\n            this._core.leave(\"playing\");\n            this._core.trigger(\"stopped\", null, \"video\");\n        };\n        /**\n    \t * Starts the current video.\n    \t * @public\n    \t * @param {Event} event - The event arguments.\n    \t */ Video.prototype.play = function(event) {\n            var target = $(event.target), item = target.closest(\".\" + this._core.settings.itemClass), video = this._videos[item.attr(\"data-video\")], width = video.width || \"100%\", height = video.height || this._core.$stage.height(), html, iframe;\n            if (this._playing) {\n                return;\n            }\n            this._core.enter(\"playing\");\n            this._core.trigger(\"play\", null, \"video\");\n            item = this._core.items(this._core.relative(item.index()));\n            this._core.reset(item.index());\n            html = $('<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>');\n            html.attr(\"height\", height);\n            html.attr(\"width\", width);\n            if (video.type === \"youtube\") {\n                html.attr(\"src\", \"//www.youtube.com/embed/\" + video.id + \"?autoplay=1&rel=0&v=\" + video.id);\n            } else if (video.type === \"vimeo\") {\n                html.attr(\"src\", \"//player.vimeo.com/video/\" + video.id + \"?autoplay=1\");\n            } else if (video.type === \"vzaar\") {\n                html.attr(\"src\", \"//view.vzaar.com/\" + video.id + \"/player?autoplay=true\");\n            }\n            iframe = $(html).wrap('<div class=\"owl-video-frame\" />').insertAfter(item.find(\".owl-video\"));\n            this._playing = item.addClass(\"owl-video-playing\");\n        };\n        /**\n    \t * Checks whether an video is currently in full screen mode or not.\n    \t * @todo Bad style because looks like a readonly method but changes members.\n    \t * @protected\n    \t * @returns {Boolean}\n    \t */ Video.prototype.isInFullScreen = function() {\n            var element = document1.fullscreenElement || document1.mozFullScreenElement || document1.webkitFullscreenElement;\n            return element && $(element).parent().hasClass(\"owl-video-frame\");\n        };\n        /**\n    \t * Destroys the plugin.\n    \t */ Video.prototype.destroy = function() {\n            var handler, property;\n            this._core.$element.off(\"click.owl.video\");\n            for(handler in this._handlers){\n                this._core.$element.off(handler, this._handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.Video = Video;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the animate plugin.\n    \t * @class The Navigation Plugin\n    \t * @param {Owl} scope - The Owl Carousel\n    \t */ var Animate = function(scope) {\n            this.core = scope;\n            this.core.options = $.extend({}, Animate.Defaults, this.core.options);\n            this.swapping = true;\n            this.previous = undefined;\n            this.next = undefined;\n            this.handlers = {\n                \"change.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && e.property.name == \"position\") {\n                        this.previous = this.core.current();\n                        this.next = e.property.value;\n                    }\n                }, this),\n                \"drag.owl.carousel dragged.owl.carousel translated.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace) {\n                        this.swapping = e.type == \"translated\";\n                    }\n                }, this),\n                \"translate.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n                        this.swap();\n                    }\n                }, this)\n            };\n            this.core.$element.on(this.handlers);\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ Animate.Defaults = {\n            animateOut: false,\n            animateIn: false\n        };\n        /**\n    \t * Toggles the animation classes whenever an translations starts.\n    \t * @protected\n    \t * @returns {Boolean|undefined}\n    \t */ Animate.prototype.swap = function() {\n            if (this.core.settings.items !== 1) {\n                return;\n            }\n            if (!$.support.animation || !$.support.transition) {\n                return;\n            }\n            this.core.speed(0);\n            var left, clear = $.proxy(this.clear, this), previous = this.core.$stage.children().eq(this.previous), next = this.core.$stage.children().eq(this.next), incoming = this.core.settings.animateIn, outgoing = this.core.settings.animateOut;\n            if (this.core.current() === this.previous) {\n                return;\n            }\n            if (outgoing) {\n                left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n                previous.one($.support.animation.end, clear).css({\n                    \"left\": left + \"px\"\n                }).addClass(\"animated owl-animated-out\").addClass(outgoing);\n            }\n            if (incoming) {\n                next.one($.support.animation.end, clear).addClass(\"animated owl-animated-in\").addClass(incoming);\n            }\n        };\n        Animate.prototype.clear = function(e) {\n            $(e.target).css({\n                \"left\": \"\"\n            }).removeClass(\"animated owl-animated-out owl-animated-in\").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);\n            this.core.onTransitionEnd();\n        };\n        /**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */ Animate.prototype.destroy = function() {\n            var handler, property;\n            for(handler in this.handlers){\n                this.core.$element.off(handler, this.handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the autoplay plugin.\n    \t * @class The Autoplay Plugin\n    \t * @param {Owl} scope - The Owl Carousel\n    \t */ var Autoplay = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * The autoplay timeout id.\n    \t\t * @type {Number}\n    \t\t */ this._call = null;\n            /**\n    \t\t * Depending on the state of the plugin, this variable contains either\n    \t\t * the start time of the timer or the current timer value if it's\n    \t\t * paused. Since we start in a paused state we initialize the timer\n    \t\t * value.\n    \t\t * @type {Number}\n    \t\t */ this._time = 0;\n            /**\n    \t\t * Stores the timeout currently used.\n    \t\t * @type {Number}\n    \t\t */ this._timeout = 0;\n            /**\n    \t\t * Indicates whenever the autoplay is paused.\n    \t\t * @type {Boolean}\n    \t\t */ this._paused = true;\n            /**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"changed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && e.property.name === \"settings\") {\n                        if (this._core.settings.autoplay) {\n                            this.play();\n                        } else {\n                            this.stop();\n                        }\n                    } else if (e.namespace && e.property.name === \"position\" && this._paused) {\n                        // Reset the timer. This code is triggered when the position\n                        // of the carousel was changed through user interaction.\n                        this._time = 0;\n                    }\n                }, this),\n                \"initialized.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.autoplay) {\n                        this.play();\n                    }\n                }, this),\n                \"play.owl.autoplay\": $.proxy(function(e, t, s) {\n                    if (e.namespace) {\n                        this.play(t, s);\n                    }\n                }, this),\n                \"stop.owl.autoplay\": $.proxy(function(e) {\n                    if (e.namespace) {\n                        this.stop();\n                    }\n                }, this),\n                \"mouseover.owl.autoplay\": $.proxy(function() {\n                    if (this._core.settings.autoplayHoverPause && this._core.is(\"rotating\")) {\n                        this.pause();\n                    }\n                }, this),\n                \"mouseleave.owl.autoplay\": $.proxy(function() {\n                    if (this._core.settings.autoplayHoverPause && this._core.is(\"rotating\")) {\n                        this.play();\n                    }\n                }, this),\n                \"touchstart.owl.core\": $.proxy(function() {\n                    if (this._core.settings.autoplayHoverPause && this._core.is(\"rotating\")) {\n                        this.pause();\n                    }\n                }, this),\n                \"touchend.owl.core\": $.proxy(function() {\n                    if (this._core.settings.autoplayHoverPause) {\n                        this.play();\n                    }\n                }, this)\n            };\n            // register event handlers\n            this._core.$element.on(this._handlers);\n            // set default options\n            this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ Autoplay.Defaults = {\n            autoplay: false,\n            autoplayTimeout: 5000,\n            autoplayHoverPause: false,\n            autoplaySpeed: false\n        };\n        /**\n    \t * Transition to the next slide and set a timeout for the next transition.\n    \t * @private\n    \t * @param {Number} [speed] - The animation speed for the animations.\n    \t */ Autoplay.prototype._next = function(speed) {\n            this._call = window1.setTimeout($.proxy(this._next, this, speed), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read());\n            if (this._core.is(\"interacting\") || document1.hidden) {\n                return;\n            }\n            this._core.next(speed || this._core.settings.autoplaySpeed);\n        };\n        /**\n    \t * Reads the current timer value when the timer is playing.\n    \t * @public\n    \t */ Autoplay.prototype.read = function() {\n            return new Date().getTime() - this._time;\n        };\n        /**\n    \t * Starts the autoplay.\n    \t * @public\n    \t * @param {Number} [timeout] - The interval before the next animation starts.\n    \t * @param {Number} [speed] - The animation speed for the animations.\n    \t */ Autoplay.prototype.play = function(timeout, speed) {\n            var elapsed;\n            if (!this._core.is(\"rotating\")) {\n                this._core.enter(\"rotating\");\n            }\n            timeout = timeout || this._core.settings.autoplayTimeout;\n            // Calculate the elapsed time since the last transition. If the carousel\n            // wasn't playing this calculation will yield zero.\n            elapsed = Math.min(this._time % (this._timeout || timeout), timeout);\n            if (this._paused) {\n                // Start the clock.\n                this._time = this.read();\n                this._paused = false;\n            } else {\n                // Clear the active timeout to allow replacement.\n                window1.clearTimeout(this._call);\n            }\n            // Adjust the origin of the timer to match the new timeout value.\n            this._time += this.read() % timeout - elapsed;\n            this._timeout = timeout;\n            this._call = window1.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);\n        };\n        /**\n    \t * Stops the autoplay.\n    \t * @public\n    \t */ Autoplay.prototype.stop = function() {\n            if (this._core.is(\"rotating\")) {\n                // Reset the clock.\n                this._time = 0;\n                this._paused = true;\n                window1.clearTimeout(this._call);\n                this._core.leave(\"rotating\");\n            }\n        };\n        /**\n    \t * Pauses the autoplay.\n    \t * @public\n    \t */ Autoplay.prototype.pause = function() {\n            if (this._core.is(\"rotating\") && !this._paused) {\n                // Pause the clock.\n                this._time = this.read();\n                this._paused = true;\n                window1.clearTimeout(this._call);\n            }\n        };\n        /**\n    \t * Destroys the plugin.\n    \t */ Autoplay.prototype.destroy = function() {\n            var handler, property;\n            this.stop();\n            for(handler in this._handlers){\n                this._core.$element.off(handler, this._handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the navigation plugin.\n    \t * @class The Navigation Plugin\n    \t * @param {Owl} carousel - The Owl Carousel.\n    \t */ var Navigation = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * Indicates whether the plugin is initialized or not.\n    \t\t * @protected\n    \t\t * @type {Boolean}\n    \t\t */ this._initialized = false;\n            /**\n    \t\t * The current paging indexes.\n    \t\t * @protected\n    \t\t * @type {Array}\n    \t\t */ this._pages = [];\n            /**\n    \t\t * All DOM elements of the user interface.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._controls = {};\n            /**\n    \t\t * Markup for an indicator.\n    \t\t * @protected\n    \t\t * @type {Array.<String>}\n    \t\t */ this._templates = [];\n            /**\n    \t\t * The carousel element.\n    \t\t * @type {jQuery}\n    \t\t */ this.$element = this._core.$element;\n            /**\n    \t\t * Overridden methods of the carousel.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._overrides = {\n                next: this._core.next,\n                prev: this._core.prev,\n                to: this._core.to\n            };\n            /**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"prepared.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.dotsData) {\n                        this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + $(e.content).find(\"[data-dot]\").addBack(\"[data-dot]\").attr(\"data-dot\") + \"</div>\");\n                    }\n                }, this),\n                \"added.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.dotsData) {\n                        this._templates.splice(e.position, 0, this._templates.pop());\n                    }\n                }, this),\n                \"remove.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.dotsData) {\n                        this._templates.splice(e.position, 1);\n                    }\n                }, this),\n                \"changed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && e.property.name == \"position\") {\n                        this.draw();\n                    }\n                }, this),\n                \"initialized.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && !this._initialized) {\n                        this._core.trigger(\"initialize\", null, \"navigation\");\n                        this.initialize();\n                        this.update();\n                        this.draw();\n                        this._initialized = true;\n                        this._core.trigger(\"initialized\", null, \"navigation\");\n                    }\n                }, this),\n                \"refreshed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._initialized) {\n                        this._core.trigger(\"refresh\", null, \"navigation\");\n                        this.update();\n                        this.draw();\n                        this._core.trigger(\"refreshed\", null, \"navigation\");\n                    }\n                }, this)\n            };\n            // set default options\n            this._core.options = $.extend({}, Navigation.Defaults, this._core.options);\n            // register event handlers\n            this.$element.on(this._handlers);\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t * @todo Rename `slideBy` to `navBy`\n    \t */ Navigation.Defaults = {\n            nav: false,\n            navText: [\n                '<span aria-label=\"' + \"Previous\" + '\">&#x2039;</span>',\n                '<span aria-label=\"' + \"Next\" + '\">&#x203a;</span>'\n            ],\n            navSpeed: false,\n            navElement: 'button type=\"button\" role=\"presentation\"',\n            navContainer: false,\n            navContainerClass: \"owl-nav\",\n            navClass: [\n                \"owl-prev\",\n                \"owl-next\"\n            ],\n            slideBy: 1,\n            dotClass: \"owl-dot\",\n            dotsClass: \"owl-dots\",\n            dots: true,\n            dotsEach: false,\n            dotsData: false,\n            dotsSpeed: false,\n            dotsContainer: false\n        };\n        /**\n    \t * Initializes the layout of the plugin and extends the carousel.\n    \t * @protected\n    \t */ Navigation.prototype.initialize = function() {\n            var override, settings = this._core.settings;\n            // create DOM structure for relative navigation\n            this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $(\"<div>\").addClass(settings.navContainerClass).appendTo(this.$element)).addClass(\"disabled\");\n            this._controls.$previous = $(\"<\" + settings.navElement + \">\").addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on(\"click\", $.proxy(function(e) {\n                this.prev(settings.navSpeed);\n            }, this));\n            this._controls.$next = $(\"<\" + settings.navElement + \">\").addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on(\"click\", $.proxy(function(e) {\n                this.next(settings.navSpeed);\n            }, this));\n            // create DOM structure for absolute navigation\n            if (!settings.dotsData) {\n                this._templates = [\n                    $('<button role=\"button\">').addClass(settings.dotClass).append($(\"<span>\")).prop(\"outerHTML\")\n                ];\n            }\n            this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $(\"<div>\").addClass(settings.dotsClass).appendTo(this.$element)).addClass(\"disabled\");\n            this._controls.$absolute.on(\"click\", \"button\", $.proxy(function(e) {\n                var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();\n                e.preventDefault();\n                this.to(index, settings.dotsSpeed);\n            }, this));\n            /*$el.on('focusin', function() {\n    \t\t\t$(document).off(\".carousel\");\n\n    \t\t\t$(document).on('keydown.carousel', function(e) {\n    \t\t\t\tif(e.keyCode == 37) {\n    \t\t\t\t\t$el.trigger('prev.owl')\n    \t\t\t\t}\n    \t\t\t\tif(e.keyCode == 39) {\n    \t\t\t\t\t$el.trigger('next.owl')\n    \t\t\t\t}\n    \t\t\t});\n    \t\t});*/ // override public methods of the carousel\n            for(override in this._overrides){\n                this._core[override] = $.proxy(this[override], this);\n            }\n        };\n        /**\n    \t * Destroys the plugin.\n    \t * @protected\n    \t */ Navigation.prototype.destroy = function() {\n            var handler, control, property, override, settings;\n            settings = this._core.settings;\n            for(handler in this._handlers){\n                this.$element.off(handler, this._handlers[handler]);\n            }\n            for(control in this._controls){\n                if (control === \"$relative\" && settings.navContainer) {\n                    this._controls[control].html(\"\");\n                } else {\n                    this._controls[control].remove();\n                }\n            }\n            for(override in this.overides){\n                this._core[override] = this._overrides[override];\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        /**\n    \t * Updates the internal state.\n    \t * @protected\n    \t */ Navigation.prototype.update = function() {\n            var i, j, k, lower = this._core.clones().length / 2, upper = lower + this._core.items().length, maximum = this._core.maximum(true), settings = this._core.settings, size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;\n            if (settings.slideBy !== \"page\") {\n                settings.slideBy = Math.min(settings.slideBy, settings.items);\n            }\n            if (settings.dots || settings.slideBy == \"page\") {\n                this._pages = [];\n                for(i = lower, j = 0, k = 0; i < upper; i++){\n                    if (j >= size || j === 0) {\n                        this._pages.push({\n                            start: Math.min(maximum, i - lower),\n                            end: i - lower + size - 1\n                        });\n                        if (Math.min(maximum, i - lower) === maximum) {\n                            break;\n                        }\n                        j = 0, ++k;\n                    }\n                    j += this._core.mergers(this._core.relative(i));\n                }\n            }\n        };\n        /**\n    \t * Draws the user interface.\n    \t * @todo The option `dotsData` wont work.\n    \t * @protected\n    \t */ Navigation.prototype.draw = function() {\n            var difference, settings = this._core.settings, disabled = this._core.items().length <= settings.items, index = this._core.relative(this._core.current()), loop = settings.loop || settings.rewind;\n            this._controls.$relative.toggleClass(\"disabled\", !settings.nav || disabled);\n            if (settings.nav) {\n                this._controls.$previous.toggleClass(\"disabled\", !loop && index <= this._core.minimum(true));\n                this._controls.$next.toggleClass(\"disabled\", !loop && index >= this._core.maximum(true));\n            }\n            this._controls.$absolute.toggleClass(\"disabled\", !settings.dots || disabled);\n            if (settings.dots) {\n                difference = this._pages.length - this._controls.$absolute.children().length;\n                if (settings.dotsData && difference !== 0) {\n                    this._controls.$absolute.html(this._templates.join(\"\"));\n                } else if (difference > 0) {\n                    this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n                } else if (difference < 0) {\n                    this._controls.$absolute.children().slice(difference).remove();\n                }\n                this._controls.$absolute.find(\".active\").removeClass(\"active\");\n                this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass(\"active\");\n            }\n        };\n        /**\n    \t * Extends event data.\n    \t * @protected\n    \t * @param {Event} event - The event object which gets thrown.\n    \t */ Navigation.prototype.onTrigger = function(event) {\n            var settings = this._core.settings;\n            event.page = {\n                index: $.inArray(this.current(), this._pages),\n                count: this._pages.length,\n                size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)\n            };\n        };\n        /**\n    \t * Gets the current page position of the carousel.\n    \t * @protected\n    \t * @returns {Number}\n    \t */ Navigation.prototype.current = function() {\n            var current = this._core.relative(this._core.current());\n            return $.grep(this._pages, $.proxy(function(page, index) {\n                return page.start <= current && page.end >= current;\n            }, this)).pop();\n        };\n        /**\n    \t * Gets the current succesor/predecessor position.\n    \t * @protected\n    \t * @returns {Number}\n    \t */ Navigation.prototype.getPosition = function(successor) {\n            var position, length, settings = this._core.settings;\n            if (settings.slideBy == \"page\") {\n                position = $.inArray(this.current(), this._pages);\n                length = this._pages.length;\n                successor ? ++position : --position;\n                position = this._pages[(position % length + length) % length].start;\n            } else {\n                position = this._core.relative(this._core.current());\n                length = this._core.items().length;\n                successor ? position += settings.slideBy : position -= settings.slideBy;\n            }\n            return position;\n        };\n        /**\n    \t * Slides to the next item or page.\n    \t * @public\n    \t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n    \t */ Navigation.prototype.next = function(speed) {\n            $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n        };\n        /**\n    \t * Slides to the previous item or page.\n    \t * @public\n    \t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n    \t */ Navigation.prototype.prev = function(speed) {\n            $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n        };\n        /**\n    \t * Slides to the specified item or page.\n    \t * @public\n    \t * @param {Number} position - The position of the item or page.\n    \t * @param {Number} [speed] - The time in milliseconds for the transition.\n    \t * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\n    \t */ Navigation.prototype.to = function(position, speed, standard) {\n            var length;\n            if (!standard && this._pages.length) {\n                length = this._pages.length;\n                $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);\n            } else {\n                $.proxy(this._overrides.to, this._core)(position, speed);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        /**\n    \t * Creates the hash plugin.\n    \t * @class The Hash Plugin\n    \t * @param {Owl} carousel - The Owl Carousel\n    \t */ var Hash = function(carousel) {\n            /**\n    \t\t * Reference to the core.\n    \t\t * @protected\n    \t\t * @type {Owl}\n    \t\t */ this._core = carousel;\n            /**\n    \t\t * Hash index for the items.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._hashes = {};\n            /**\n    \t\t * The carousel element.\n    \t\t * @type {jQuery}\n    \t\t */ this.$element = this._core.$element;\n            /**\n    \t\t * All event handlers.\n    \t\t * @protected\n    \t\t * @type {Object}\n    \t\t */ this._handlers = {\n                \"initialized.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && this._core.settings.startPosition === \"URLHash\") {\n                        $(window1).trigger(\"hashchange.owl.navigation\");\n                    }\n                }, this),\n                \"prepared.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace) {\n                        var hash = $(e.content).find(\"[data-hash]\").addBack(\"[data-hash]\").attr(\"data-hash\");\n                        if (!hash) {\n                            return;\n                        }\n                        this._hashes[hash] = e.content;\n                    }\n                }, this),\n                \"changed.owl.carousel\": $.proxy(function(e) {\n                    if (e.namespace && e.property.name === \"position\") {\n                        var current = this._core.items(this._core.relative(this._core.current())), hash = $.map(this._hashes, function(item, hash) {\n                            return item === current ? hash : null;\n                        }).join();\n                        if (!hash || window1.location.hash.slice(1) === hash) {\n                            return;\n                        }\n                        window1.location.hash = hash;\n                    }\n                }, this)\n            };\n            // set default options\n            this._core.options = $.extend({}, Hash.Defaults, this._core.options);\n            // register the event handlers\n            this.$element.on(this._handlers);\n            // register event listener for hash navigation\n            $(window1).on(\"hashchange.owl.navigation\", $.proxy(function(e) {\n                var hash = window1.location.hash.substring(1), items = this._core.$stage.children(), position = this._hashes[hash] && items.index(this._hashes[hash]);\n                if (position === undefined || position === this._core.current()) {\n                    return;\n                }\n                this._core.to(this._core.relative(position), false, true);\n            }, this));\n        };\n        /**\n    \t * Default options.\n    \t * @public\n    \t */ Hash.Defaults = {\n            URLhashListener: false\n        };\n        /**\n    \t * Destroys the plugin.\n    \t * @public\n    \t */ Hash.prototype.destroy = function() {\n            var handler, property;\n            $(window1).off(\"hashchange.owl.navigation\");\n            for(handler in this._handlers){\n                this._core.$element.off(handler, this._handlers[handler]);\n            }\n            for(property in Object.getOwnPropertyNames(this)){\n                typeof this[property] != \"function\" && (this[property] = null);\n            }\n        };\n        $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    (function($, window1, document1, undefined) {\n        var style = $(\"<support>\").get(0).style, prefixes = \"Webkit Moz O ms\".split(\" \"), events = {\n            transition: {\n                end: {\n                    WebkitTransition: \"webkitTransitionEnd\",\n                    MozTransition: \"transitionend\",\n                    OTransition: \"oTransitionEnd\",\n                    transition: \"transitionend\"\n                }\n            },\n            animation: {\n                end: {\n                    WebkitAnimation: \"webkitAnimationEnd\",\n                    MozAnimation: \"animationend\",\n                    OAnimation: \"oAnimationEnd\",\n                    animation: \"animationend\"\n                }\n            }\n        }, tests = {\n            csstransforms: function() {\n                return !!test(\"transform\");\n            },\n            csstransforms3d: function() {\n                return !!test(\"perspective\");\n            },\n            csstransitions: function() {\n                return !!test(\"transition\");\n            },\n            cssanimations: function() {\n                return !!test(\"animation\");\n            }\n        };\n        function test(property, prefixed) {\n            var result = false, upper = property.charAt(0).toUpperCase() + property.slice(1);\n            $.each((property + \" \" + prefixes.join(upper + \" \") + upper).split(\" \"), function(i, property) {\n                if (style[property] !== undefined) {\n                    result = prefixed ? property : true;\n                    return false;\n                }\n            });\n            return result;\n        }\n        function prefixed(property) {\n            return test(property, true);\n        }\n        if (tests.csstransitions()) {\n            /* jshint -W053 */ $.support.transition = new String(prefixed(\"transition\"));\n            $.support.transition.end = events.transition.end[$.support.transition];\n        }\n        if (tests.cssanimations()) {\n            /* jshint -W053 */ $.support.animation = new String(prefixed(\"animation\"));\n            $.support.animation.end = events.animation.end[$.support.animation];\n        }\n        if (tests.csstransforms()) {\n            /* jshint -W053 */ $.support.transform = new String(prefixed(\"transform\"));\n            $.support.transform3d = tests.csstransforms3d();\n        }\n    })(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n    var $ = __webpack_provided_window_dot_jQuery;\n    var ReactOwlCarousel = /** @class */ function(_super) {\n        __extends(ReactOwlCarousel, _super);\n        function ReactOwlCarousel(props) {\n            var _this = _super.call(this, props) || this;\n            _this.containerRef = function(inst) {\n                _this.container = inst;\n            };\n            var _a = filterOptions(_this.props), options = _a[0], propsWithoutOptions = _a[1];\n            _this.options = options;\n            _this.propsWithoutOptions = propsWithoutOptions;\n            return _this;\n        }\n        ReactOwlCarousel.prototype.componentDidMount = function() {\n            this.$ele = $(this.container);\n            this.create();\n        };\n        ReactOwlCarousel.prototype.UNSAFE_componentWillReceiveProps = function() {\n            this.destory();\n        };\n        ReactOwlCarousel.prototype.componentDidUpdate = function() {\n            var _a = filterOptions(this.props), options = _a[0], propsWithoutOptions = _a[1];\n            this.options = options;\n            this.propsWithoutOptions = propsWithoutOptions;\n            this.create();\n        };\n        ReactOwlCarousel.prototype.next = function(speed) {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            if (typeof speed === \"number\") {\n                this.$ele.trigger(\"next.owl.carousel\", [\n                    speed\n                ]);\n            } else {\n                this.$ele.trigger(\"next.owl.carousel\", speed);\n            }\n        };\n        ReactOwlCarousel.prototype.prev = function(speed) {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            if (typeof speed === \"number\") {\n                this.$ele.trigger(\"prev.owl.carousel\", [\n                    speed\n                ]);\n            } else {\n                this.$ele.trigger(\"prev.owl.carousel\", speed);\n            }\n        };\n        ReactOwlCarousel.prototype.to = function(position, speed) {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            if (typeof position === \"number\" && typeof speed === \"number\") {\n                this.$ele.trigger(\"to.owl.carousel\", [\n                    position,\n                    speed\n                ]);\n            } else {\n                this.$ele.trigger(\"to.owl.carousel\");\n            }\n        };\n        ReactOwlCarousel.prototype.create = function(options) {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            this.$ele.owlCarousel(options || this.options);\n        };\n        ReactOwlCarousel.prototype.destory = function() {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            this.$ele.trigger(\"destroy.owl.carousel\");\n        };\n        ReactOwlCarousel.prototype.play = function(timeout, speed) {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            if (typeof timeout === \"number\" && typeof speed === \"number\") {\n                this.$ele.trigger(\"play.owl.autoplay\", [\n                    timeout,\n                    speed\n                ]);\n            } else {\n                this.$ele.trigger(\"play.owl.autoplay\");\n            }\n        };\n        ReactOwlCarousel.prototype.stop = function() {\n            if (!this.$ele) throw new Error(\"OwlCarousel is not created\");\n            this.$ele.trigger(\"stop.owl.autoplay\");\n        };\n        ReactOwlCarousel.prototype.render = function() {\n            var _a = this.propsWithoutOptions, className = _a.className, props = __rest(_a, [\n                \"className\"\n            ]);\n            return React__default.createElement(\"div\", __assign({\n                className: \"owl-carousel \" + className,\n                ref: this.containerRef\n            }, props));\n        };\n        return ReactOwlCarousel;\n    }(React.Component);\n    var OPTIONS = new Set([\n        \"items\",\n        \"margin\",\n        \"loop\",\n        \"center\",\n        \"mouseDrag\",\n        \"touchDrag\",\n        \"pullDrag\",\n        \"freeDrag\",\n        \"stagePadding\",\n        \"merge\",\n        \"mergeFit\",\n        \"autoWidth\",\n        \"startPosition\",\n        \"URLhashListener\",\n        \"nav\",\n        \"rewind\",\n        \"navText\",\n        \"navElement\",\n        \"slideBy\",\n        \"dots\",\n        \"dotsEach\",\n        \"dotData\",\n        \"lazyLoad\",\n        \"lazyContent\",\n        \"autoplay\",\n        \"autoplayTimeout\",\n        \"autoplayHoverPause\",\n        \"smartSpeed\",\n        \"fluidSpeed\",\n        \"autoplaySpeed\",\n        \"navSpeed\",\n        \"dotsSpeed\",\n        \"dragEndSpeed\",\n        \"callbacks\",\n        \"responsive\",\n        \"responsiveRefreshRate\",\n        \"responsiveBaseElement\",\n        \"video\",\n        \"videoHeight\",\n        \"videoWidth\",\n        \"animateOut\",\n        \"animateIn\",\n        \"fallbackEasing\",\n        \"info\",\n        \"nestedItemSelector\",\n        \"itemElement\",\n        \"stageElement\",\n        \"navContainer\",\n        \"dotsContainer\",\n        // 'CLASSES'\n        \"refreshClass\",\n        \"loadingClass\",\n        \"loadedClass\",\n        \"rtlClass\",\n        \"dragClass\",\n        \"grabClass\",\n        \"stageClass\",\n        \"stageOuterClass\",\n        \"navContainerClass\",\n        \"navClass\",\n        \"controlsClass\",\n        \"dotClass\",\n        \"dotsClass\",\n        \"autoHeightClass\",\n        \"responsiveClass\",\n        // 'EVENTS'\n        \"onInitialize\",\n        \"onInitialized\",\n        \"onResize\",\n        \"onResized\",\n        \"onRefresh\",\n        \"onRefreshed\",\n        \"onDrag\",\n        \"onDragged\",\n        \"onTranslate\",\n        \"onTranslated\",\n        \"onChange\",\n        \"onChanged\",\n        \"onLoadLazy\",\n        \"onLoadedLazy\",\n        \"onStopVideo\",\n        \"onPlayVideo\"\n    ]);\n    function filterOptions(item) {\n        var options = {};\n        var propsWithoutOptions = {};\n        Object.keys(item).forEach(function(key) {\n            if (OPTIONS.has(key)) {\n                options[key] = item[key];\n            } else {\n                propsWithoutOptions[key] = item[key];\n            }\n        });\n        return [\n            options,\n            propsWithoutOptions\n        ];\n    }\n    return ReactOwlCarousel;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-owl-carousel/umd/OwlCarousel.js\n");

/***/ })

};
;